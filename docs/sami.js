
window.projectVersion = 'master';

(function(root) {

    var bhIndex = null;
    var rootPath = '';
    var treeHtml = '        <ul>                <li data-name="namespace:FFMpeg" class="opened">                    <div style="padding-left:0px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg.html">FFMpeg</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:FFMpeg_Coordinate" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/Coordinate.html">Coordinate</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:FFMpeg_Coordinate_AspectRatio" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Coordinate/AspectRatio.html">AspectRatio</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Coordinate_Dimension" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Coordinate/Dimension.html">Dimension</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Coordinate_FrameRate" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Coordinate/FrameRate.html">FrameRate</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Coordinate_Point" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Coordinate/Point.html">Point</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Coordinate_TimeCode" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Coordinate/TimeCode.html">TimeCode</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:FFMpeg_Driver" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/Driver.html">Driver</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:FFMpeg_Driver_FFMpegDriver" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Driver/FFMpegDriver.html">FFMpegDriver</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Driver_FFProbeDriver" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Driver/FFProbeDriver.html">FFProbeDriver</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:FFMpeg_Exception" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/Exception.html">Exception</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:FFMpeg_Exception_ExceptionInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Exception/ExceptionInterface.html">ExceptionInterface</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Exception_ExecutableNotFoundException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Exception/ExecutableNotFoundException.html">ExecutableNotFoundException</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Exception_InvalidArgumentException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Exception/InvalidArgumentException.html">InvalidArgumentException</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Exception_LogicException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Exception/LogicException.html">LogicException</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Exception_RuntimeException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Exception/RuntimeException.html">RuntimeException</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:FFMpeg_FFProbe" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/FFProbe.html">FFProbe</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:FFMpeg_FFProbe_DataMapping" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/FFProbe/DataMapping.html">DataMapping</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:FFMpeg_FFProbe_DataMapping_AbstractData" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/FFProbe/DataMapping/AbstractData.html">AbstractData</a>                    </div>                </li>                            <li data-name="class:FFMpeg_FFProbe_DataMapping_Format" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/FFProbe/DataMapping/Format.html">Format</a>                    </div>                </li>                            <li data-name="class:FFMpeg_FFProbe_DataMapping_Stream" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/FFProbe/DataMapping/Stream.html">Stream</a>                    </div>                </li>                            <li data-name="class:FFMpeg_FFProbe_DataMapping_StreamCollection" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/FFProbe/DataMapping/StreamCollection.html">StreamCollection</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:FFMpeg_FFProbe_Mapper" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/FFProbe/Mapper.html">Mapper</a>                    </div>                </li>                            <li data-name="class:FFMpeg_FFProbe_MapperInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/FFProbe/MapperInterface.html">MapperInterface</a>                    </div>                </li>                            <li data-name="class:FFMpeg_FFProbe_OptionsTester" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/FFProbe/OptionsTester.html">OptionsTester</a>                    </div>                </li>                            <li data-name="class:FFMpeg_FFProbe_OptionsTesterInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/FFProbe/OptionsTesterInterface.html">OptionsTesterInterface</a>                    </div>                </li>                            <li data-name="class:FFMpeg_FFProbe_OutputParser" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/FFProbe/OutputParser.html">OutputParser</a>                    </div>                </li>                            <li data-name="class:FFMpeg_FFProbe_OutputParserInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/FFProbe/OutputParserInterface.html">OutputParserInterface</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:FFMpeg_Filters" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/Filters.html">Filters</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:FFMpeg_Filters_Audio" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/Filters/Audio.html">Audio</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:FFMpeg_Filters_Audio_AddMetadataFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Audio/AddMetadataFilter.html">AddMetadataFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Audio_AudioClipFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Audio/AudioClipFilter.html">AudioClipFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Audio_AudioFilterInterface" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Audio/AudioFilterInterface.html">AudioFilterInterface</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Audio_AudioFilters" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Audio/AudioFilters.html">AudioFilters</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Audio_AudioResamplableFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Audio/AudioResamplableFilter.html">AudioResamplableFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Audio_CustomFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Audio/CustomFilter.html">CustomFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Audio_SimpleFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Audio/SimpleFilter.html">SimpleFilter</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:FFMpeg_Filters_Concat" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/Filters/Concat.html">Concat</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:FFMpeg_Filters_Concat_ConcatFilterInterface" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Concat/ConcatFilterInterface.html">ConcatFilterInterface</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Concat_ConcatFilters" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Concat/ConcatFilters.html">ConcatFilters</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:FFMpeg_Filters_Frame" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/Filters/Frame.html">Frame</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:FFMpeg_Filters_Frame_CustomFrameFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Frame/CustomFrameFilter.html">CustomFrameFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Frame_DisplayRatioFixerFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Frame/DisplayRatioFixerFilter.html">DisplayRatioFixerFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Frame_FrameFilterInterface" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Frame/FrameFilterInterface.html">FrameFilterInterface</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Frame_FrameFilters" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Frame/FrameFilters.html">FrameFilters</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:FFMpeg_Filters_Gif" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/Filters/Gif.html">Gif</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:FFMpeg_Filters_Gif_GifFilterInterface" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Gif/GifFilterInterface.html">GifFilterInterface</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Gif_GifFilters" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Gif/GifFilters.html">GifFilters</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:FFMpeg_Filters_Video" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/Filters/Video.html">Video</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:FFMpeg_Filters_Video_ClipFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Video/ClipFilter.html">ClipFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Video_CropFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Video/CropFilter.html">CropFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Video_CustomFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Video/CustomFilter.html">CustomFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Video_ExtractMultipleFramesFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Video/ExtractMultipleFramesFilter.html">ExtractMultipleFramesFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Video_FrameRateFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Video/FrameRateFilter.html">FrameRateFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Video_PadFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Video/PadFilter.html">PadFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Video_ResizeFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Video/ResizeFilter.html">ResizeFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Video_RotateFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Video/RotateFilter.html">RotateFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Video_SynchronizeFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Video/SynchronizeFilter.html">SynchronizeFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Video_VideoFilterInterface" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Video/VideoFilterInterface.html">VideoFilterInterface</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Video_VideoFilters" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Video/VideoFilters.html">VideoFilters</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Video_WatermarkFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Video/WatermarkFilter.html">WatermarkFilter</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:FFMpeg_Filters_Waveform" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/Filters/Waveform.html">Waveform</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:FFMpeg_Filters_Waveform_WaveformDownmixFilter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Waveform/WaveformDownmixFilter.html">WaveformDownmixFilter</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Waveform_WaveformFilterInterface" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Waveform/WaveformFilterInterface.html">WaveformFilterInterface</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_Waveform_WaveformFilters" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Filters/Waveform/WaveformFilters.html">WaveformFilters</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:FFMpeg_Filters_FilterInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Filters/FilterInterface.html">FilterInterface</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Filters_FiltersCollection" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Filters/FiltersCollection.html">FiltersCollection</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:FFMpeg_Format" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/Format.html">Format</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:FFMpeg_Format_Audio" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/Format/Audio.html">Audio</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:FFMpeg_Format_Audio_Aac" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Format/Audio/Aac.html">Aac</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_Audio_DefaultAudio" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Format/Audio/DefaultAudio.html">DefaultAudio</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_Audio_Flac" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Format/Audio/Flac.html">Flac</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_Audio_Mp3" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Format/Audio/Mp3.html">Mp3</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_Audio_Vorbis" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Format/Audio/Vorbis.html">Vorbis</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_Audio_Wav" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Format/Audio/Wav.html">Wav</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:FFMpeg_Format_ProgressListener" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/Format/ProgressListener.html">ProgressListener</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:FFMpeg_Format_ProgressListener_AbstractProgressListener" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Format/ProgressListener/AbstractProgressListener.html">AbstractProgressListener</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_ProgressListener_AudioProgressListener" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Format/ProgressListener/AudioProgressListener.html">AudioProgressListener</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_ProgressListener_VideoProgressListener" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Format/ProgressListener/VideoProgressListener.html">VideoProgressListener</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:FFMpeg_Format_Video" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/Format/Video.html">Video</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:FFMpeg_Format_Video_DefaultVideo" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Format/Video/DefaultVideo.html">DefaultVideo</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_Video_Ogg" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Format/Video/Ogg.html">Ogg</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_Video_WMV" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Format/Video/WMV.html">WMV</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_Video_WMV3" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Format/Video/WMV3.html">WMV3</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_Video_WebM" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Format/Video/WebM.html">WebM</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_Video_X264" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="FFMpeg/Format/Video/X264.html">X264</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:FFMpeg_Format_AudioInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Format/AudioInterface.html">AudioInterface</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_FormatInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Format/FormatInterface.html">FormatInterface</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_FrameInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Format/FrameInterface.html">FrameInterface</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_ProgressableInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Format/ProgressableInterface.html">ProgressableInterface</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Format_VideoInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Format/VideoInterface.html">VideoInterface</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:FFMpeg_Media" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="FFMpeg/Media.html">Media</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:FFMpeg_Media_AbstractMediaType" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Media/AbstractMediaType.html">AbstractMediaType</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Media_AbstractStreamableMedia" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Media/AbstractStreamableMedia.html">AbstractStreamableMedia</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Media_AbstractVideo" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Media/AbstractVideo.html">AbstractVideo</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Media_Audio" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Media/Audio.html">Audio</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Media_Clip" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Media/Clip.html">Clip</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Media_Concat" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Media/Concat.html">Concat</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Media_Frame" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Media/Frame.html">Frame</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Media_Gif" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Media/Gif.html">Gif</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Media_MediaTypeInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Media/MediaTypeInterface.html">MediaTypeInterface</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Media_Video" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Media/Video.html">Video</a>                    </div>                </li>                            <li data-name="class:FFMpeg_Media_Waveform" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="FFMpeg/Media/Waveform.html">Waveform</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:FFMpeg_FFMpeg" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="FFMpeg/FFMpeg.html">FFMpeg</a>                    </div>                </li>                            <li data-name="class:FFMpeg_FFMpegServiceProvider" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="FFMpeg/FFMpegServiceProvider.html">FFMpegServiceProvider</a>                    </div>                </li>                            <li data-name="class:FFMpeg_FFProbe" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="FFMpeg/FFProbe.html">FFProbe</a>                    </div>                </li>                </ul></div>                </li>                </ul>';

    var searchTypeClasses = {
        'Namespace': 'label-default',
        'Class': 'label-info',
        'Interface': 'label-primary',
        'Trait': 'label-success',
        'Method': 'label-danger',
        '_': 'label-warning'
    };

    var searchIndex = [
                    
            {"type": "Namespace", "link": "FFMpeg.html", "name": "FFMpeg", "doc": "Namespace FFMpeg"},{"type": "Namespace", "link": "FFMpeg/Coordinate.html", "name": "FFMpeg\\Coordinate", "doc": "Namespace FFMpeg\\Coordinate"},{"type": "Namespace", "link": "FFMpeg/Driver.html", "name": "FFMpeg\\Driver", "doc": "Namespace FFMpeg\\Driver"},{"type": "Namespace", "link": "FFMpeg/Exception.html", "name": "FFMpeg\\Exception", "doc": "Namespace FFMpeg\\Exception"},{"type": "Namespace", "link": "FFMpeg/FFProbe.html", "name": "FFMpeg\\FFProbe", "doc": "Namespace FFMpeg\\FFProbe"},{"type": "Namespace", "link": "FFMpeg/FFProbe/DataMapping.html", "name": "FFMpeg\\FFProbe\\DataMapping", "doc": "Namespace FFMpeg\\FFProbe\\DataMapping"},{"type": "Namespace", "link": "FFMpeg/Filters.html", "name": "FFMpeg\\Filters", "doc": "Namespace FFMpeg\\Filters"},{"type": "Namespace", "link": "FFMpeg/Filters/Audio.html", "name": "FFMpeg\\Filters\\Audio", "doc": "Namespace FFMpeg\\Filters\\Audio"},{"type": "Namespace", "link": "FFMpeg/Filters/Concat.html", "name": "FFMpeg\\Filters\\Concat", "doc": "Namespace FFMpeg\\Filters\\Concat"},{"type": "Namespace", "link": "FFMpeg/Filters/Frame.html", "name": "FFMpeg\\Filters\\Frame", "doc": "Namespace FFMpeg\\Filters\\Frame"},{"type": "Namespace", "link": "FFMpeg/Filters/Gif.html", "name": "FFMpeg\\Filters\\Gif", "doc": "Namespace FFMpeg\\Filters\\Gif"},{"type": "Namespace", "link": "FFMpeg/Filters/Video.html", "name": "FFMpeg\\Filters\\Video", "doc": "Namespace FFMpeg\\Filters\\Video"},{"type": "Namespace", "link": "FFMpeg/Filters/Waveform.html", "name": "FFMpeg\\Filters\\Waveform", "doc": "Namespace FFMpeg\\Filters\\Waveform"},{"type": "Namespace", "link": "FFMpeg/Format.html", "name": "FFMpeg\\Format", "doc": "Namespace FFMpeg\\Format"},{"type": "Namespace", "link": "FFMpeg/Format/Audio.html", "name": "FFMpeg\\Format\\Audio", "doc": "Namespace FFMpeg\\Format\\Audio"},{"type": "Namespace", "link": "FFMpeg/Format/ProgressListener.html", "name": "FFMpeg\\Format\\ProgressListener", "doc": "Namespace FFMpeg\\Format\\ProgressListener"},{"type": "Namespace", "link": "FFMpeg/Format/Video.html", "name": "FFMpeg\\Format\\Video", "doc": "Namespace FFMpeg\\Format\\Video"},{"type": "Namespace", "link": "FFMpeg/Media.html", "name": "FFMpeg\\Media", "doc": "Namespace FFMpeg\\Media"},
            {"type": "Interface", "fromName": "FFMpeg\\Exception", "fromLink": "FFMpeg/Exception.html", "link": "FFMpeg/Exception/ExceptionInterface.html", "name": "FFMpeg\\Exception\\ExceptionInterface", "doc": "&quot;&quot;"},
                    
            {"type": "Interface", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe/MapperInterface.html", "name": "FFMpeg\\FFProbe\\MapperInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\FFProbe\\MapperInterface", "fromLink": "FFMpeg/FFProbe/MapperInterface.html", "link": "FFMpeg/FFProbe/MapperInterface.html#method_map", "name": "FFMpeg\\FFProbe\\MapperInterface::map", "doc": "&quot;Maps data given its type.&quot;"},
            
            {"type": "Interface", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe/OptionsTesterInterface.html", "name": "FFMpeg\\FFProbe\\OptionsTesterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\FFProbe\\OptionsTesterInterface", "fromLink": "FFMpeg/FFProbe/OptionsTesterInterface.html", "link": "FFMpeg/FFProbe/OptionsTesterInterface.html#method_has", "name": "FFMpeg\\FFProbe\\OptionsTesterInterface::has", "doc": "&quot;Tells if the given option is supported by ffprobe.&quot;"},
            
            {"type": "Interface", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe/OutputParserInterface.html", "name": "FFMpeg\\FFProbe\\OutputParserInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\FFProbe\\OutputParserInterface", "fromLink": "FFMpeg/FFProbe/OutputParserInterface.html", "link": "FFMpeg/FFProbe/OutputParserInterface.html#method_parse", "name": "FFMpeg\\FFProbe\\OutputParserInterface::parse", "doc": "&quot;Parses ffprobe raw output.&quot;"},
            
            {"type": "Interface", "fromName": "FFMpeg\\Filters\\Audio", "fromLink": "FFMpeg/Filters/Audio.html", "link": "FFMpeg/Filters/Audio/AudioFilterInterface.html", "name": "FFMpeg\\Filters\\Audio\\AudioFilterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioFilterInterface", "fromLink": "FFMpeg/Filters/Audio/AudioFilterInterface.html", "link": "FFMpeg/Filters/Audio/AudioFilterInterface.html#method_apply", "name": "FFMpeg\\Filters\\Audio\\AudioFilterInterface::apply", "doc": "&quot;Applies the filter on the the Audio media given an format.&quot;"},
            
            {"type": "Interface", "fromName": "FFMpeg\\Filters\\Concat", "fromLink": "FFMpeg/Filters/Concat.html", "link": "FFMpeg/Filters/Concat/ConcatFilterInterface.html", "name": "FFMpeg\\Filters\\Concat\\ConcatFilterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Concat\\ConcatFilterInterface", "fromLink": "FFMpeg/Filters/Concat/ConcatFilterInterface.html", "link": "FFMpeg/Filters/Concat/ConcatFilterInterface.html#method_apply", "name": "FFMpeg\\Filters\\Concat\\ConcatFilterInterface::apply", "doc": "&quot;&quot;"},
            
            {"type": "Interface", "fromName": "FFMpeg\\Filters", "fromLink": "FFMpeg/Filters.html", "link": "FFMpeg/Filters/FilterInterface.html", "name": "FFMpeg\\Filters\\FilterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\FilterInterface", "fromLink": "FFMpeg/Filters/FilterInterface.html", "link": "FFMpeg/Filters/FilterInterface.html#method_getPriority", "name": "FFMpeg\\Filters\\FilterInterface::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
            
            {"type": "Interface", "fromName": "FFMpeg\\Filters\\Frame", "fromLink": "FFMpeg/Filters/Frame.html", "link": "FFMpeg/Filters/Frame/FrameFilterInterface.html", "name": "FFMpeg\\Filters\\Frame\\FrameFilterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Frame\\FrameFilterInterface", "fromLink": "FFMpeg/Filters/Frame/FrameFilterInterface.html", "link": "FFMpeg/Filters/Frame/FrameFilterInterface.html#method_apply", "name": "FFMpeg\\Filters\\Frame\\FrameFilterInterface::apply", "doc": "&quot;&quot;"},
            
            {"type": "Interface", "fromName": "FFMpeg\\Filters\\Gif", "fromLink": "FFMpeg/Filters/Gif.html", "link": "FFMpeg/Filters/Gif/GifFilterInterface.html", "name": "FFMpeg\\Filters\\Gif\\GifFilterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Gif\\GifFilterInterface", "fromLink": "FFMpeg/Filters/Gif/GifFilterInterface.html", "link": "FFMpeg/Filters/Gif/GifFilterInterface.html#method_apply", "name": "FFMpeg\\Filters\\Gif\\GifFilterInterface::apply", "doc": "&quot;&quot;"},
            
            {"type": "Interface", "fromName": "FFMpeg\\Filters\\Video", "fromLink": "FFMpeg/Filters/Video.html", "link": "FFMpeg/Filters/Video/VideoFilterInterface.html", "name": "FFMpeg\\Filters\\Video\\VideoFilterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\VideoFilterInterface", "fromLink": "FFMpeg/Filters/Video/VideoFilterInterface.html", "link": "FFMpeg/Filters/Video/VideoFilterInterface.html#method_apply", "name": "FFMpeg\\Filters\\Video\\VideoFilterInterface::apply", "doc": "&quot;Applies the filter on the the Video media given an format.&quot;"},
            
            {"type": "Interface", "fromName": "FFMpeg\\Filters\\Waveform", "fromLink": "FFMpeg/Filters/Waveform.html", "link": "FFMpeg/Filters/Waveform/WaveformFilterInterface.html", "name": "FFMpeg\\Filters\\Waveform\\WaveformFilterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Waveform\\WaveformFilterInterface", "fromLink": "FFMpeg/Filters/Waveform/WaveformFilterInterface.html", "link": "FFMpeg/Filters/Waveform/WaveformFilterInterface.html#method_apply", "name": "FFMpeg\\Filters\\Waveform\\WaveformFilterInterface::apply", "doc": "&quot;&quot;"},
            
            {"type": "Interface", "fromName": "FFMpeg\\Format", "fromLink": "FFMpeg/Format.html", "link": "FFMpeg/Format/AudioInterface.html", "name": "FFMpeg\\Format\\AudioInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\AudioInterface", "fromLink": "FFMpeg/Format/AudioInterface.html", "link": "FFMpeg/Format/AudioInterface.html#method_getAudioKiloBitrate", "name": "FFMpeg\\Format\\AudioInterface::getAudioKiloBitrate", "doc": "&quot;Gets the audio kiloBitrate value.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\AudioInterface", "fromLink": "FFMpeg/Format/AudioInterface.html", "link": "FFMpeg/Format/AudioInterface.html#method_getAudioChannels", "name": "FFMpeg\\Format\\AudioInterface::getAudioChannels", "doc": "&quot;Gets the audio channels value.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\AudioInterface", "fromLink": "FFMpeg/Format/AudioInterface.html", "link": "FFMpeg/Format/AudioInterface.html#method_getAudioCodec", "name": "FFMpeg\\Format\\AudioInterface::getAudioCodec", "doc": "&quot;Returns the audio codec.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\AudioInterface", "fromLink": "FFMpeg/Format/AudioInterface.html", "link": "FFMpeg/Format/AudioInterface.html#method_getAvailableAudioCodecs", "name": "FFMpeg\\Format\\AudioInterface::getAvailableAudioCodecs", "doc": "&quot;Returns the list of available audio codecs for this format.&quot;"},
            
            {"type": "Interface", "fromName": "FFMpeg\\Format", "fromLink": "FFMpeg/Format.html", "link": "FFMpeg/Format/FormatInterface.html", "name": "FFMpeg\\Format\\FormatInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\FormatInterface", "fromLink": "FFMpeg/Format/FormatInterface.html", "link": "FFMpeg/Format/FormatInterface.html#method_getPasses", "name": "FFMpeg\\Format\\FormatInterface::getPasses", "doc": "&quot;Returns the number of passes.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\FormatInterface", "fromLink": "FFMpeg/Format/FormatInterface.html", "link": "FFMpeg/Format/FormatInterface.html#method_getExtraParams", "name": "FFMpeg\\Format\\FormatInterface::getExtraParams", "doc": "&quot;Returns an array of extra parameters to add to ffmpeg commandline.&quot;"},
            
            {"type": "Interface", "fromName": "FFMpeg\\Format", "fromLink": "FFMpeg/Format.html", "link": "FFMpeg/Format/FrameInterface.html", "name": "FFMpeg\\Format\\FrameInterface", "doc": "&quot;&quot;"},
                    
            {"type": "Interface", "fromName": "FFMpeg\\Format", "fromLink": "FFMpeg/Format.html", "link": "FFMpeg/Format/ProgressableInterface.html", "name": "FFMpeg\\Format\\ProgressableInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\ProgressableInterface", "fromLink": "FFMpeg/Format/ProgressableInterface.html", "link": "FFMpeg/Format/ProgressableInterface.html#method_createProgressListener", "name": "FFMpeg\\Format\\ProgressableInterface::createProgressListener", "doc": "&quot;Creates the progress listener.&quot;"},
            
            {"type": "Interface", "fromName": "FFMpeg\\Format", "fromLink": "FFMpeg/Format.html", "link": "FFMpeg/Format/VideoInterface.html", "name": "FFMpeg\\Format\\VideoInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\VideoInterface", "fromLink": "FFMpeg/Format/VideoInterface.html", "link": "FFMpeg/Format/VideoInterface.html#method_getKiloBitrate", "name": "FFMpeg\\Format\\VideoInterface::getKiloBitrate", "doc": "&quot;Gets the kiloBitrate value.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\VideoInterface", "fromLink": "FFMpeg/Format/VideoInterface.html", "link": "FFMpeg/Format/VideoInterface.html#method_getModulus", "name": "FFMpeg\\Format\\VideoInterface::getModulus", "doc": "&quot;Returns the modulus used by the Resizable video.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\VideoInterface", "fromLink": "FFMpeg/Format/VideoInterface.html", "link": "FFMpeg/Format/VideoInterface.html#method_getVideoCodec", "name": "FFMpeg\\Format\\VideoInterface::getVideoCodec", "doc": "&quot;Returns the video codec.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\VideoInterface", "fromLink": "FFMpeg/Format/VideoInterface.html", "link": "FFMpeg/Format/VideoInterface.html#method_supportBFrames", "name": "FFMpeg\\Format\\VideoInterface::supportBFrames", "doc": "&quot;Returns true if the current format supports B-Frames.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\VideoInterface", "fromLink": "FFMpeg/Format/VideoInterface.html", "link": "FFMpeg/Format/VideoInterface.html#method_getAvailableVideoCodecs", "name": "FFMpeg\\Format\\VideoInterface::getAvailableVideoCodecs", "doc": "&quot;Returns the list of available video codecs for this format.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\VideoInterface", "fromLink": "FFMpeg/Format/VideoInterface.html", "link": "FFMpeg/Format/VideoInterface.html#method_getAdditionalParameters", "name": "FFMpeg\\Format\\VideoInterface::getAdditionalParameters", "doc": "&quot;Returns the list of available video codecs for this format.&quot;"},
            
            {"type": "Interface", "fromName": "FFMpeg\\Media", "fromLink": "FFMpeg/Media.html", "link": "FFMpeg/Media/MediaTypeInterface.html", "name": "FFMpeg\\Media\\MediaTypeInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Media\\MediaTypeInterface", "fromLink": "FFMpeg/Media/MediaTypeInterface.html", "link": "FFMpeg/Media/MediaTypeInterface.html#method_filters", "name": "FFMpeg\\Media\\MediaTypeInterface::filters", "doc": "&quot;Returns the available filters.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\MediaTypeInterface", "fromLink": "FFMpeg/Media/MediaTypeInterface.html", "link": "FFMpeg/Media/MediaTypeInterface.html#method_getPathfile", "name": "FFMpeg\\Media\\MediaTypeInterface::getPathfile", "doc": "&quot;&quot;"},
            
            
            {"type": "Class", "fromName": "FFMpeg\\Coordinate", "fromLink": "FFMpeg/Coordinate.html", "link": "FFMpeg/Coordinate/AspectRatio.html", "name": "FFMpeg\\Coordinate\\AspectRatio", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Coordinate\\AspectRatio", "fromLink": "FFMpeg/Coordinate/AspectRatio.html", "link": "FFMpeg/Coordinate/AspectRatio.html#method___construct", "name": "FFMpeg\\Coordinate\\AspectRatio::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Coordinate\\AspectRatio", "fromLink": "FFMpeg/Coordinate/AspectRatio.html", "link": "FFMpeg/Coordinate/AspectRatio.html#method_getValue", "name": "FFMpeg\\Coordinate\\AspectRatio::getValue", "doc": "&quot;Returns the value of the ratio.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Coordinate\\AspectRatio", "fromLink": "FFMpeg/Coordinate/AspectRatio.html", "link": "FFMpeg/Coordinate/AspectRatio.html#method_calculateWidth", "name": "FFMpeg\\Coordinate\\AspectRatio::calculateWidth", "doc": "&quot;Computes the best width for given height and modulus.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Coordinate\\AspectRatio", "fromLink": "FFMpeg/Coordinate/AspectRatio.html", "link": "FFMpeg/Coordinate/AspectRatio.html#method_calculateHeight", "name": "FFMpeg\\Coordinate\\AspectRatio::calculateHeight", "doc": "&quot;Computes the best height for given width and modulus.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Coordinate\\AspectRatio", "fromLink": "FFMpeg/Coordinate/AspectRatio.html", "link": "FFMpeg/Coordinate/AspectRatio.html#method_create", "name": "FFMpeg\\Coordinate\\AspectRatio::create", "doc": "&quot;Creates a ratio based on Dimension.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Coordinate", "fromLink": "FFMpeg/Coordinate.html", "link": "FFMpeg/Coordinate/Dimension.html", "name": "FFMpeg\\Coordinate\\Dimension", "doc": "&quot;Dimension object, used for manipulating width and height couples&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Coordinate\\Dimension", "fromLink": "FFMpeg/Coordinate/Dimension.html", "link": "FFMpeg/Coordinate/Dimension.html#method___construct", "name": "FFMpeg\\Coordinate\\Dimension::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Coordinate\\Dimension", "fromLink": "FFMpeg/Coordinate/Dimension.html", "link": "FFMpeg/Coordinate/Dimension.html#method_getWidth", "name": "FFMpeg\\Coordinate\\Dimension::getWidth", "doc": "&quot;Returns width.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Coordinate\\Dimension", "fromLink": "FFMpeg/Coordinate/Dimension.html", "link": "FFMpeg/Coordinate/Dimension.html#method_getHeight", "name": "FFMpeg\\Coordinate\\Dimension::getHeight", "doc": "&quot;Returns height.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Coordinate\\Dimension", "fromLink": "FFMpeg/Coordinate/Dimension.html", "link": "FFMpeg/Coordinate/Dimension.html#method_getRatio", "name": "FFMpeg\\Coordinate\\Dimension::getRatio", "doc": "&quot;Returns the ratio.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Coordinate", "fromLink": "FFMpeg/Coordinate.html", "link": "FFMpeg/Coordinate/FrameRate.html", "name": "FFMpeg\\Coordinate\\FrameRate", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Coordinate\\FrameRate", "fromLink": "FFMpeg/Coordinate/FrameRate.html", "link": "FFMpeg/Coordinate/FrameRate.html#method___construct", "name": "FFMpeg\\Coordinate\\FrameRate::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Coordinate\\FrameRate", "fromLink": "FFMpeg/Coordinate/FrameRate.html", "link": "FFMpeg/Coordinate/FrameRate.html#method_getValue", "name": "FFMpeg\\Coordinate\\FrameRate::getValue", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Coordinate", "fromLink": "FFMpeg/Coordinate.html", "link": "FFMpeg/Coordinate/Point.html", "name": "FFMpeg\\Coordinate\\Point", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Coordinate\\Point", "fromLink": "FFMpeg/Coordinate/Point.html", "link": "FFMpeg/Coordinate/Point.html#method___construct", "name": "FFMpeg\\Coordinate\\Point::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Coordinate\\Point", "fromLink": "FFMpeg/Coordinate/Point.html", "link": "FFMpeg/Coordinate/Point.html#method_getX", "name": "FFMpeg\\Coordinate\\Point::getX", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Coordinate\\Point", "fromLink": "FFMpeg/Coordinate/Point.html", "link": "FFMpeg/Coordinate/Point.html#method_getY", "name": "FFMpeg\\Coordinate\\Point::getY", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Coordinate", "fromLink": "FFMpeg/Coordinate.html", "link": "FFMpeg/Coordinate/TimeCode.html", "name": "FFMpeg\\Coordinate\\TimeCode", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Coordinate\\TimeCode", "fromLink": "FFMpeg/Coordinate/TimeCode.html", "link": "FFMpeg/Coordinate/TimeCode.html#method___construct", "name": "FFMpeg\\Coordinate\\TimeCode::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Coordinate\\TimeCode", "fromLink": "FFMpeg/Coordinate/TimeCode.html", "link": "FFMpeg/Coordinate/TimeCode.html#method___toString", "name": "FFMpeg\\Coordinate\\TimeCode::__toString", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Coordinate\\TimeCode", "fromLink": "FFMpeg/Coordinate/TimeCode.html", "link": "FFMpeg/Coordinate/TimeCode.html#method_fromString", "name": "FFMpeg\\Coordinate\\TimeCode::fromString", "doc": "&quot;Creates timecode from string.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Coordinate\\TimeCode", "fromLink": "FFMpeg/Coordinate/TimeCode.html", "link": "FFMpeg/Coordinate/TimeCode.html#method_fromSeconds", "name": "FFMpeg\\Coordinate\\TimeCode::fromSeconds", "doc": "&quot;Creates timecode from number of seconds.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Coordinate\\TimeCode", "fromLink": "FFMpeg/Coordinate/TimeCode.html", "link": "FFMpeg/Coordinate/TimeCode.html#method_toSeconds", "name": "FFMpeg\\Coordinate\\TimeCode::toSeconds", "doc": "&quot;Returns this timecode in seconds&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Coordinate\\TimeCode", "fromLink": "FFMpeg/Coordinate/TimeCode.html", "link": "FFMpeg/Coordinate/TimeCode.html#method_isAfter", "name": "FFMpeg\\Coordinate\\TimeCode::isAfter", "doc": "&quot;Helper function wether &lt;code&gt;$timecode&lt;\/code&gt; is after this one&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Driver", "fromLink": "FFMpeg/Driver.html", "link": "FFMpeg/Driver/FFMpegDriver.html", "name": "FFMpeg\\Driver\\FFMpegDriver", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Driver\\FFMpegDriver", "fromLink": "FFMpeg/Driver/FFMpegDriver.html", "link": "FFMpeg/Driver/FFMpegDriver.html#method_getName", "name": "FFMpeg\\Driver\\FFMpegDriver::getName", "doc": "&quot;{@inheritdoc}&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Driver\\FFMpegDriver", "fromLink": "FFMpeg/Driver/FFMpegDriver.html", "link": "FFMpeg/Driver/FFMpegDriver.html#method_create", "name": "FFMpeg\\Driver\\FFMpegDriver::create", "doc": "&quot;Creates an FFMpegDriver.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Driver", "fromLink": "FFMpeg/Driver.html", "link": "FFMpeg/Driver/FFProbeDriver.html", "name": "FFMpeg\\Driver\\FFProbeDriver", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Driver\\FFProbeDriver", "fromLink": "FFMpeg/Driver/FFProbeDriver.html", "link": "FFMpeg/Driver/FFProbeDriver.html#method_getName", "name": "FFMpeg\\Driver\\FFProbeDriver::getName", "doc": "&quot;{@inheritdoc}&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Driver\\FFProbeDriver", "fromLink": "FFMpeg/Driver/FFProbeDriver.html", "link": "FFMpeg/Driver/FFProbeDriver.html#method_create", "name": "FFMpeg\\Driver\\FFProbeDriver::create", "doc": "&quot;Creates an FFProbeDriver.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Exception", "fromLink": "FFMpeg/Exception.html", "link": "FFMpeg/Exception/ExceptionInterface.html", "name": "FFMpeg\\Exception\\ExceptionInterface", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "FFMpeg\\Exception", "fromLink": "FFMpeg/Exception.html", "link": "FFMpeg/Exception/ExecutableNotFoundException.html", "name": "FFMpeg\\Exception\\ExecutableNotFoundException", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "FFMpeg\\Exception", "fromLink": "FFMpeg/Exception.html", "link": "FFMpeg/Exception/InvalidArgumentException.html", "name": "FFMpeg\\Exception\\InvalidArgumentException", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "FFMpeg\\Exception", "fromLink": "FFMpeg/Exception.html", "link": "FFMpeg/Exception/LogicException.html", "name": "FFMpeg\\Exception\\LogicException", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "FFMpeg\\Exception", "fromLink": "FFMpeg/Exception.html", "link": "FFMpeg/Exception/RuntimeException.html", "name": "FFMpeg\\Exception\\RuntimeException", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "FFMpeg", "fromLink": "FFMpeg.html", "link": "FFMpeg/FFMpeg.html", "name": "FFMpeg\\FFMpeg", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\FFMpeg", "fromLink": "FFMpeg/FFMpeg.html", "link": "FFMpeg/FFMpeg.html#method___construct", "name": "FFMpeg\\FFMpeg::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFMpeg", "fromLink": "FFMpeg/FFMpeg.html", "link": "FFMpeg/FFMpeg.html#method_setFFProbe", "name": "FFMpeg\\FFMpeg::setFFProbe", "doc": "&quot;Sets FFProbe.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFMpeg", "fromLink": "FFMpeg/FFMpeg.html", "link": "FFMpeg/FFMpeg.html#method_getFFProbe", "name": "FFMpeg\\FFMpeg::getFFProbe", "doc": "&quot;Gets FFProbe.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFMpeg", "fromLink": "FFMpeg/FFMpeg.html", "link": "FFMpeg/FFMpeg.html#method_setFFMpegDriver", "name": "FFMpeg\\FFMpeg::setFFMpegDriver", "doc": "&quot;Sets the ffmpeg driver.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFMpeg", "fromLink": "FFMpeg/FFMpeg.html", "link": "FFMpeg/FFMpeg.html#method_getFFMpegDriver", "name": "FFMpeg\\FFMpeg::getFFMpegDriver", "doc": "&quot;Gets the ffmpeg driver.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFMpeg", "fromLink": "FFMpeg/FFMpeg.html", "link": "FFMpeg/FFMpeg.html#method_open", "name": "FFMpeg\\FFMpeg::open", "doc": "&quot;Opens a file in order to be processed.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFMpeg", "fromLink": "FFMpeg/FFMpeg.html", "link": "FFMpeg/FFMpeg.html#method_create", "name": "FFMpeg\\FFMpeg::create", "doc": "&quot;Creates a new FFMpeg instance.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg", "fromLink": "FFMpeg.html", "link": "FFMpeg/FFMpegServiceProvider.html", "name": "FFMpeg\\FFMpegServiceProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\FFMpegServiceProvider", "fromLink": "FFMpeg/FFMpegServiceProvider.html", "link": "FFMpeg/FFMpegServiceProvider.html#method_register", "name": "FFMpeg\\FFMpegServiceProvider::register", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFMpegServiceProvider", "fromLink": "FFMpeg/FFMpegServiceProvider.html", "link": "FFMpeg/FFMpegServiceProvider.html#method_boot", "name": "FFMpeg\\FFMpegServiceProvider::boot", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg", "fromLink": "FFMpeg.html", "link": "FFMpeg/FFProbe.html", "name": "FFMpeg\\FFProbe", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe.html#method___construct", "name": "FFMpeg\\FFProbe::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe.html#method_getParser", "name": "FFMpeg\\FFProbe::getParser", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe.html#method_setParser", "name": "FFMpeg\\FFProbe::setParser", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe.html#method_getFFProbeDriver", "name": "FFMpeg\\FFProbe::getFFProbeDriver", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe.html#method_setFFProbeDriver", "name": "FFMpeg\\FFProbe::setFFProbeDriver", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe.html#method_setOptionsTester", "name": "FFMpeg\\FFProbe::setOptionsTester", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe.html#method_getOptionsTester", "name": "FFMpeg\\FFProbe::getOptionsTester", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe.html#method_setCache", "name": "FFMpeg\\FFProbe::setCache", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe.html#method_getCache", "name": "FFMpeg\\FFProbe::getCache", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe.html#method_getMapper", "name": "FFMpeg\\FFProbe::getMapper", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe.html#method_setMapper", "name": "FFMpeg\\FFProbe::setMapper", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe.html#method_format", "name": "FFMpeg\\FFProbe::format", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe.html#method_isValid", "name": "FFMpeg\\FFProbe::isValid", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe.html#method_streams", "name": "FFMpeg\\FFProbe::streams", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe.html#method_create", "name": "FFMpeg\\FFProbe::create", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\FFProbe\\DataMapping", "fromLink": "FFMpeg/FFProbe/DataMapping.html", "link": "FFMpeg/FFProbe/DataMapping/AbstractData.html", "name": "FFMpeg\\FFProbe\\DataMapping\\AbstractData", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\AbstractData", "fromLink": "FFMpeg/FFProbe/DataMapping/AbstractData.html", "link": "FFMpeg/FFProbe/DataMapping/AbstractData.html#method___construct", "name": "FFMpeg\\FFProbe\\DataMapping\\AbstractData::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\AbstractData", "fromLink": "FFMpeg/FFProbe/DataMapping/AbstractData.html", "link": "FFMpeg/FFProbe/DataMapping/AbstractData.html#method_has", "name": "FFMpeg\\FFProbe\\DataMapping\\AbstractData::has", "doc": "&quot;Returns true if data has property.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\AbstractData", "fromLink": "FFMpeg/FFProbe/DataMapping/AbstractData.html", "link": "FFMpeg/FFProbe/DataMapping/AbstractData.html#method_get", "name": "FFMpeg\\FFProbe\\DataMapping\\AbstractData::get", "doc": "&quot;Returns the property value given its name.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\AbstractData", "fromLink": "FFMpeg/FFProbe/DataMapping/AbstractData.html", "link": "FFMpeg/FFProbe/DataMapping/AbstractData.html#method_set", "name": "FFMpeg\\FFProbe\\DataMapping\\AbstractData::set", "doc": "&quot;Sets the property value given its name.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\AbstractData", "fromLink": "FFMpeg/FFProbe/DataMapping/AbstractData.html", "link": "FFMpeg/FFProbe/DataMapping/AbstractData.html#method_keys", "name": "FFMpeg\\FFProbe\\DataMapping\\AbstractData::keys", "doc": "&quot;Returns all property names.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\AbstractData", "fromLink": "FFMpeg/FFProbe/DataMapping/AbstractData.html", "link": "FFMpeg/FFProbe/DataMapping/AbstractData.html#method_all", "name": "FFMpeg\\FFProbe\\DataMapping\\AbstractData::all", "doc": "&quot;Returns all properties and their values.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\AbstractData", "fromLink": "FFMpeg/FFProbe/DataMapping/AbstractData.html", "link": "FFMpeg/FFProbe/DataMapping/AbstractData.html#method_count", "name": "FFMpeg\\FFProbe\\DataMapping\\AbstractData::count", "doc": "&quot;{@inheritdoc}&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\FFProbe\\DataMapping", "fromLink": "FFMpeg/FFProbe/DataMapping.html", "link": "FFMpeg/FFProbe/DataMapping/Format.html", "name": "FFMpeg\\FFProbe\\DataMapping\\Format", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "FFMpeg\\FFProbe\\DataMapping", "fromLink": "FFMpeg/FFProbe/DataMapping.html", "link": "FFMpeg/FFProbe/DataMapping/Stream.html", "name": "FFMpeg\\FFProbe\\DataMapping\\Stream", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\Stream", "fromLink": "FFMpeg/FFProbe/DataMapping/Stream.html", "link": "FFMpeg/FFProbe/DataMapping/Stream.html#method_isAudio", "name": "FFMpeg\\FFProbe\\DataMapping\\Stream::isAudio", "doc": "&quot;Returns true if the stream is an audio stream.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\Stream", "fromLink": "FFMpeg/FFProbe/DataMapping/Stream.html", "link": "FFMpeg/FFProbe/DataMapping/Stream.html#method_isVideo", "name": "FFMpeg\\FFProbe\\DataMapping\\Stream::isVideo", "doc": "&quot;Returns true if the stream is a video stream.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\Stream", "fromLink": "FFMpeg/FFProbe/DataMapping/Stream.html", "link": "FFMpeg/FFProbe/DataMapping/Stream.html#method_getDimensions", "name": "FFMpeg\\FFProbe\\DataMapping\\Stream::getDimensions", "doc": "&quot;Returns the dimension of the video stream.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\FFProbe\\DataMapping", "fromLink": "FFMpeg/FFProbe/DataMapping.html", "link": "FFMpeg/FFProbe/DataMapping/StreamCollection.html", "name": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection", "fromLink": "FFMpeg/FFProbe/DataMapping/StreamCollection.html", "link": "FFMpeg/FFProbe/DataMapping/StreamCollection.html#method___construct", "name": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection", "fromLink": "FFMpeg/FFProbe/DataMapping/StreamCollection.html", "link": "FFMpeg/FFProbe/DataMapping/StreamCollection.html#method_first", "name": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection::first", "doc": "&quot;Returns the first stream of the collection, null if the collection is\nempty.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection", "fromLink": "FFMpeg/FFProbe/DataMapping/StreamCollection.html", "link": "FFMpeg/FFProbe/DataMapping/StreamCollection.html#method_add", "name": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection::add", "doc": "&quot;Adds a stream to the collection.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection", "fromLink": "FFMpeg/FFProbe/DataMapping/StreamCollection.html", "link": "FFMpeg/FFProbe/DataMapping/StreamCollection.html#method_videos", "name": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection::videos", "doc": "&quot;Returns a new StreamCollection with only video streams.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection", "fromLink": "FFMpeg/FFProbe/DataMapping/StreamCollection.html", "link": "FFMpeg/FFProbe/DataMapping/StreamCollection.html#method_audios", "name": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection::audios", "doc": "&quot;Returns a new StreamCollection with only audio streams.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection", "fromLink": "FFMpeg/FFProbe/DataMapping/StreamCollection.html", "link": "FFMpeg/FFProbe/DataMapping/StreamCollection.html#method_count", "name": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection::count", "doc": "&quot;{@inheritdoc}&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection", "fromLink": "FFMpeg/FFProbe/DataMapping/StreamCollection.html", "link": "FFMpeg/FFProbe/DataMapping/StreamCollection.html#method_all", "name": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection::all", "doc": "&quot;Returns the array of contained streams.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection", "fromLink": "FFMpeg/FFProbe/DataMapping/StreamCollection.html", "link": "FFMpeg/FFProbe/DataMapping/StreamCollection.html#method_getIterator", "name": "FFMpeg\\FFProbe\\DataMapping\\StreamCollection::getIterator", "doc": "&quot;{@inheritdoc}&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe/Mapper.html", "name": "FFMpeg\\FFProbe\\Mapper", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\FFProbe\\Mapper", "fromLink": "FFMpeg/FFProbe/Mapper.html", "link": "FFMpeg/FFProbe/Mapper.html#method_map", "name": "FFMpeg\\FFProbe\\Mapper::map", "doc": "&quot;Maps data given its type.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe/MapperInterface.html", "name": "FFMpeg\\FFProbe\\MapperInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\FFProbe\\MapperInterface", "fromLink": "FFMpeg/FFProbe/MapperInterface.html", "link": "FFMpeg/FFProbe/MapperInterface.html#method_map", "name": "FFMpeg\\FFProbe\\MapperInterface::map", "doc": "&quot;Maps data given its type.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe/OptionsTester.html", "name": "FFMpeg\\FFProbe\\OptionsTester", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\FFProbe\\OptionsTester", "fromLink": "FFMpeg/FFProbe/OptionsTester.html", "link": "FFMpeg/FFProbe/OptionsTester.html#method___construct", "name": "FFMpeg\\FFProbe\\OptionsTester::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\FFProbe\\OptionsTester", "fromLink": "FFMpeg/FFProbe/OptionsTester.html", "link": "FFMpeg/FFProbe/OptionsTester.html#method_has", "name": "FFMpeg\\FFProbe\\OptionsTester::has", "doc": "&quot;Tells if the given option is supported by ffprobe.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe/OptionsTesterInterface.html", "name": "FFMpeg\\FFProbe\\OptionsTesterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\FFProbe\\OptionsTesterInterface", "fromLink": "FFMpeg/FFProbe/OptionsTesterInterface.html", "link": "FFMpeg/FFProbe/OptionsTesterInterface.html#method_has", "name": "FFMpeg\\FFProbe\\OptionsTesterInterface::has", "doc": "&quot;Tells if the given option is supported by ffprobe.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe/OutputParser.html", "name": "FFMpeg\\FFProbe\\OutputParser", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\FFProbe\\OutputParser", "fromLink": "FFMpeg/FFProbe/OutputParser.html", "link": "FFMpeg/FFProbe/OutputParser.html#method_parse", "name": "FFMpeg\\FFProbe\\OutputParser::parse", "doc": "&quot;Parses ffprobe raw output.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\FFProbe", "fromLink": "FFMpeg/FFProbe.html", "link": "FFMpeg/FFProbe/OutputParserInterface.html", "name": "FFMpeg\\FFProbe\\OutputParserInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\FFProbe\\OutputParserInterface", "fromLink": "FFMpeg/FFProbe/OutputParserInterface.html", "link": "FFMpeg/FFProbe/OutputParserInterface.html#method_parse", "name": "FFMpeg\\FFProbe\\OutputParserInterface::parse", "doc": "&quot;Parses ffprobe raw output.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Audio", "fromLink": "FFMpeg/Filters/Audio.html", "link": "FFMpeg/Filters/Audio/AddMetadataFilter.html", "name": "FFMpeg\\Filters\\Audio\\AddMetadataFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AddMetadataFilter", "fromLink": "FFMpeg/Filters/Audio/AddMetadataFilter.html", "link": "FFMpeg/Filters/Audio/AddMetadataFilter.html#method___construct", "name": "FFMpeg\\Filters\\Audio\\AddMetadataFilter::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AddMetadataFilter", "fromLink": "FFMpeg/Filters/Audio/AddMetadataFilter.html", "link": "FFMpeg/Filters/Audio/AddMetadataFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Audio\\AddMetadataFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AddMetadataFilter", "fromLink": "FFMpeg/Filters/Audio/AddMetadataFilter.html", "link": "FFMpeg/Filters/Audio/AddMetadataFilter.html#method_apply", "name": "FFMpeg\\Filters\\Audio\\AddMetadataFilter::apply", "doc": "&quot;Applies the filter on the the Audio media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Audio", "fromLink": "FFMpeg/Filters/Audio.html", "link": "FFMpeg/Filters/Audio/AudioClipFilter.html", "name": "FFMpeg\\Filters\\Audio\\AudioClipFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioClipFilter", "fromLink": "FFMpeg/Filters/Audio/AudioClipFilter.html", "link": "FFMpeg/Filters/Audio/AudioClipFilter.html#method___construct", "name": "FFMpeg\\Filters\\Audio\\AudioClipFilter::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioClipFilter", "fromLink": "FFMpeg/Filters/Audio/AudioClipFilter.html", "link": "FFMpeg/Filters/Audio/AudioClipFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Audio\\AudioClipFilter::getPriority", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioClipFilter", "fromLink": "FFMpeg/Filters/Audio/AudioClipFilter.html", "link": "FFMpeg/Filters/Audio/AudioClipFilter.html#method_getStart", "name": "FFMpeg\\Filters\\Audio\\AudioClipFilter::getStart", "doc": "&quot;Returns the start position the audio is being cutted&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioClipFilter", "fromLink": "FFMpeg/Filters/Audio/AudioClipFilter.html", "link": "FFMpeg/Filters/Audio/AudioClipFilter.html#method_getDuration", "name": "FFMpeg\\Filters\\Audio\\AudioClipFilter::getDuration", "doc": "&quot;Returns how long the audio is being cutted. Returns null when the duration is infinite,&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioClipFilter", "fromLink": "FFMpeg/Filters/Audio/AudioClipFilter.html", "link": "FFMpeg/Filters/Audio/AudioClipFilter.html#method_apply", "name": "FFMpeg\\Filters\\Audio\\AudioClipFilter::apply", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Audio", "fromLink": "FFMpeg/Filters/Audio.html", "link": "FFMpeg/Filters/Audio/AudioFilterInterface.html", "name": "FFMpeg\\Filters\\Audio\\AudioFilterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioFilterInterface", "fromLink": "FFMpeg/Filters/Audio/AudioFilterInterface.html", "link": "FFMpeg/Filters/Audio/AudioFilterInterface.html#method_apply", "name": "FFMpeg\\Filters\\Audio\\AudioFilterInterface::apply", "doc": "&quot;Applies the filter on the the Audio media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Audio", "fromLink": "FFMpeg/Filters/Audio.html", "link": "FFMpeg/Filters/Audio/AudioFilters.html", "name": "FFMpeg\\Filters\\Audio\\AudioFilters", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioFilters", "fromLink": "FFMpeg/Filters/Audio/AudioFilters.html", "link": "FFMpeg/Filters/Audio/AudioFilters.html#method___construct", "name": "FFMpeg\\Filters\\Audio\\AudioFilters::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioFilters", "fromLink": "FFMpeg/Filters/Audio/AudioFilters.html", "link": "FFMpeg/Filters/Audio/AudioFilters.html#method_resample", "name": "FFMpeg\\Filters\\Audio\\AudioFilters::resample", "doc": "&quot;Resamples the audio file.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioFilters", "fromLink": "FFMpeg/Filters/Audio/AudioFilters.html", "link": "FFMpeg/Filters/Audio/AudioFilters.html#method_addMetadata", "name": "FFMpeg\\Filters\\Audio\\AudioFilters::addMetadata", "doc": "&quot;Add metadata to an audio file. If no arguments are given then filter\nwill remove all metadata from the audio file&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioFilters", "fromLink": "FFMpeg/Filters/Audio/AudioFilters.html", "link": "FFMpeg/Filters/Audio/AudioFilters.html#method_clip", "name": "FFMpeg\\Filters\\Audio\\AudioFilters::clip", "doc": "&quot;Cuts the audio at &lt;code&gt;$start&lt;\/code&gt;, optionally define the end&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioFilters", "fromLink": "FFMpeg/Filters/Audio/AudioFilters.html", "link": "FFMpeg/Filters/Audio/AudioFilters.html#method_custom", "name": "FFMpeg\\Filters\\Audio\\AudioFilters::custom", "doc": "&quot;Applies a custom filter&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Audio", "fromLink": "FFMpeg/Filters/Audio.html", "link": "FFMpeg/Filters/Audio/AudioResamplableFilter.html", "name": "FFMpeg\\Filters\\Audio\\AudioResamplableFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioResamplableFilter", "fromLink": "FFMpeg/Filters/Audio/AudioResamplableFilter.html", "link": "FFMpeg/Filters/Audio/AudioResamplableFilter.html#method___construct", "name": "FFMpeg\\Filters\\Audio\\AudioResamplableFilter::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioResamplableFilter", "fromLink": "FFMpeg/Filters/Audio/AudioResamplableFilter.html", "link": "FFMpeg/Filters/Audio/AudioResamplableFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Audio\\AudioResamplableFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioResamplableFilter", "fromLink": "FFMpeg/Filters/Audio/AudioResamplableFilter.html", "link": "FFMpeg/Filters/Audio/AudioResamplableFilter.html#method_getRate", "name": "FFMpeg\\Filters\\Audio\\AudioResamplableFilter::getRate", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\AudioResamplableFilter", "fromLink": "FFMpeg/Filters/Audio/AudioResamplableFilter.html", "link": "FFMpeg/Filters/Audio/AudioResamplableFilter.html#method_apply", "name": "FFMpeg\\Filters\\Audio\\AudioResamplableFilter::apply", "doc": "&quot;Applies the filter on the the Audio media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Audio", "fromLink": "FFMpeg/Filters/Audio.html", "link": "FFMpeg/Filters/Audio/CustomFilter.html", "name": "FFMpeg\\Filters\\Audio\\CustomFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\CustomFilter", "fromLink": "FFMpeg/Filters/Audio/CustomFilter.html", "link": "FFMpeg/Filters/Audio/CustomFilter.html#method___construct", "name": "FFMpeg\\Filters\\Audio\\CustomFilter::__construct", "doc": "&quot;A custom filter, useful if you want to build complex filters&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\CustomFilter", "fromLink": "FFMpeg/Filters/Audio/CustomFilter.html", "link": "FFMpeg/Filters/Audio/CustomFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Audio\\CustomFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\CustomFilter", "fromLink": "FFMpeg/Filters/Audio/CustomFilter.html", "link": "FFMpeg/Filters/Audio/CustomFilter.html#method_apply", "name": "FFMpeg\\Filters\\Audio\\CustomFilter::apply", "doc": "&quot;Applies the filter on the the Audio media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Audio", "fromLink": "FFMpeg/Filters/Audio.html", "link": "FFMpeg/Filters/Audio/SimpleFilter.html", "name": "FFMpeg\\Filters\\Audio\\SimpleFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\SimpleFilter", "fromLink": "FFMpeg/Filters/Audio/SimpleFilter.html", "link": "FFMpeg/Filters/Audio/SimpleFilter.html#method___construct", "name": "FFMpeg\\Filters\\Audio\\SimpleFilter::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\SimpleFilter", "fromLink": "FFMpeg/Filters/Audio/SimpleFilter.html", "link": "FFMpeg/Filters/Audio/SimpleFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Audio\\SimpleFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Audio\\SimpleFilter", "fromLink": "FFMpeg/Filters/Audio/SimpleFilter.html", "link": "FFMpeg/Filters/Audio/SimpleFilter.html#method_apply", "name": "FFMpeg\\Filters\\Audio\\SimpleFilter::apply", "doc": "&quot;Applies the filter on the the Audio media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Concat", "fromLink": "FFMpeg/Filters/Concat.html", "link": "FFMpeg/Filters/Concat/ConcatFilterInterface.html", "name": "FFMpeg\\Filters\\Concat\\ConcatFilterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Concat\\ConcatFilterInterface", "fromLink": "FFMpeg/Filters/Concat/ConcatFilterInterface.html", "link": "FFMpeg/Filters/Concat/ConcatFilterInterface.html#method_apply", "name": "FFMpeg\\Filters\\Concat\\ConcatFilterInterface::apply", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Concat", "fromLink": "FFMpeg/Filters/Concat.html", "link": "FFMpeg/Filters/Concat/ConcatFilters.html", "name": "FFMpeg\\Filters\\Concat\\ConcatFilters", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Concat\\ConcatFilters", "fromLink": "FFMpeg/Filters/Concat/ConcatFilters.html", "link": "FFMpeg/Filters/Concat/ConcatFilters.html#method___construct", "name": "FFMpeg\\Filters\\Concat\\ConcatFilters::__construct", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters", "fromLink": "FFMpeg/Filters.html", "link": "FFMpeg/Filters/FilterInterface.html", "name": "FFMpeg\\Filters\\FilterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\FilterInterface", "fromLink": "FFMpeg/Filters/FilterInterface.html", "link": "FFMpeg/Filters/FilterInterface.html#method_getPriority", "name": "FFMpeg\\Filters\\FilterInterface::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters", "fromLink": "FFMpeg/Filters.html", "link": "FFMpeg/Filters/FiltersCollection.html", "name": "FFMpeg\\Filters\\FiltersCollection", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\FiltersCollection", "fromLink": "FFMpeg/Filters/FiltersCollection.html", "link": "FFMpeg/Filters/FiltersCollection.html#method_add", "name": "FFMpeg\\Filters\\FiltersCollection::add", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\FiltersCollection", "fromLink": "FFMpeg/Filters/FiltersCollection.html", "link": "FFMpeg/Filters/FiltersCollection.html#method_count", "name": "FFMpeg\\Filters\\FiltersCollection::count", "doc": "&quot;{@inheritdoc}&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\FiltersCollection", "fromLink": "FFMpeg/Filters/FiltersCollection.html", "link": "FFMpeg/Filters/FiltersCollection.html#method_getIterator", "name": "FFMpeg\\Filters\\FiltersCollection::getIterator", "doc": "&quot;{@inheritdoc}&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Frame", "fromLink": "FFMpeg/Filters/Frame.html", "link": "FFMpeg/Filters/Frame/CustomFrameFilter.html", "name": "FFMpeg\\Filters\\Frame\\CustomFrameFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Frame\\CustomFrameFilter", "fromLink": "FFMpeg/Filters/Frame/CustomFrameFilter.html", "link": "FFMpeg/Filters/Frame/CustomFrameFilter.html#method___construct", "name": "FFMpeg\\Filters\\Frame\\CustomFrameFilter::__construct", "doc": "&quot;A custom filter, useful if you want to build complex filters&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Frame\\CustomFrameFilter", "fromLink": "FFMpeg/Filters/Frame/CustomFrameFilter.html", "link": "FFMpeg/Filters/Frame/CustomFrameFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Frame\\CustomFrameFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Frame\\CustomFrameFilter", "fromLink": "FFMpeg/Filters/Frame/CustomFrameFilter.html", "link": "FFMpeg/Filters/Frame/CustomFrameFilter.html#method_apply", "name": "FFMpeg\\Filters\\Frame\\CustomFrameFilter::apply", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Frame", "fromLink": "FFMpeg/Filters/Frame.html", "link": "FFMpeg/Filters/Frame/DisplayRatioFixerFilter.html", "name": "FFMpeg\\Filters\\Frame\\DisplayRatioFixerFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Frame\\DisplayRatioFixerFilter", "fromLink": "FFMpeg/Filters/Frame/DisplayRatioFixerFilter.html", "link": "FFMpeg/Filters/Frame/DisplayRatioFixerFilter.html#method___construct", "name": "FFMpeg\\Filters\\Frame\\DisplayRatioFixerFilter::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Frame\\DisplayRatioFixerFilter", "fromLink": "FFMpeg/Filters/Frame/DisplayRatioFixerFilter.html", "link": "FFMpeg/Filters/Frame/DisplayRatioFixerFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Frame\\DisplayRatioFixerFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Frame\\DisplayRatioFixerFilter", "fromLink": "FFMpeg/Filters/Frame/DisplayRatioFixerFilter.html", "link": "FFMpeg/Filters/Frame/DisplayRatioFixerFilter.html#method_apply", "name": "FFMpeg\\Filters\\Frame\\DisplayRatioFixerFilter::apply", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Frame", "fromLink": "FFMpeg/Filters/Frame.html", "link": "FFMpeg/Filters/Frame/FrameFilterInterface.html", "name": "FFMpeg\\Filters\\Frame\\FrameFilterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Frame\\FrameFilterInterface", "fromLink": "FFMpeg/Filters/Frame/FrameFilterInterface.html", "link": "FFMpeg/Filters/Frame/FrameFilterInterface.html#method_apply", "name": "FFMpeg\\Filters\\Frame\\FrameFilterInterface::apply", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Frame", "fromLink": "FFMpeg/Filters/Frame.html", "link": "FFMpeg/Filters/Frame/FrameFilters.html", "name": "FFMpeg\\Filters\\Frame\\FrameFilters", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Frame\\FrameFilters", "fromLink": "FFMpeg/Filters/Frame/FrameFilters.html", "link": "FFMpeg/Filters/Frame/FrameFilters.html#method___construct", "name": "FFMpeg\\Filters\\Frame\\FrameFilters::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Frame\\FrameFilters", "fromLink": "FFMpeg/Filters/Frame/FrameFilters.html", "link": "FFMpeg/Filters/Frame/FrameFilters.html#method_fixDisplayRatio", "name": "FFMpeg\\Filters\\Frame\\FrameFilters::fixDisplayRatio", "doc": "&quot;Fixes the display ratio of the output frame.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Frame\\FrameFilters", "fromLink": "FFMpeg/Filters/Frame/FrameFilters.html", "link": "FFMpeg/Filters/Frame/FrameFilters.html#method_custom", "name": "FFMpeg\\Filters\\Frame\\FrameFilters::custom", "doc": "&quot;Applies a custom filter: -vf foo bar&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Gif", "fromLink": "FFMpeg/Filters/Gif.html", "link": "FFMpeg/Filters/Gif/GifFilterInterface.html", "name": "FFMpeg\\Filters\\Gif\\GifFilterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Gif\\GifFilterInterface", "fromLink": "FFMpeg/Filters/Gif/GifFilterInterface.html", "link": "FFMpeg/Filters/Gif/GifFilterInterface.html#method_apply", "name": "FFMpeg\\Filters\\Gif\\GifFilterInterface::apply", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Gif", "fromLink": "FFMpeg/Filters/Gif.html", "link": "FFMpeg/Filters/Gif/GifFilters.html", "name": "FFMpeg\\Filters\\Gif\\GifFilters", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Gif\\GifFilters", "fromLink": "FFMpeg/Filters/Gif/GifFilters.html", "link": "FFMpeg/Filters/Gif/GifFilters.html#method___construct", "name": "FFMpeg\\Filters\\Gif\\GifFilters::__construct", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Video", "fromLink": "FFMpeg/Filters/Video.html", "link": "FFMpeg/Filters/Video/ClipFilter.html", "name": "FFMpeg\\Filters\\Video\\ClipFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ClipFilter", "fromLink": "FFMpeg/Filters/Video/ClipFilter.html", "link": "FFMpeg/Filters/Video/ClipFilter.html#method___construct", "name": "FFMpeg\\Filters\\Video\\ClipFilter::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ClipFilter", "fromLink": "FFMpeg/Filters/Video/ClipFilter.html", "link": "FFMpeg/Filters/Video/ClipFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Video\\ClipFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ClipFilter", "fromLink": "FFMpeg/Filters/Video/ClipFilter.html", "link": "FFMpeg/Filters/Video/ClipFilter.html#method_getStart", "name": "FFMpeg\\Filters\\Video\\ClipFilter::getStart", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ClipFilter", "fromLink": "FFMpeg/Filters/Video/ClipFilter.html", "link": "FFMpeg/Filters/Video/ClipFilter.html#method_getDuration", "name": "FFMpeg\\Filters\\Video\\ClipFilter::getDuration", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ClipFilter", "fromLink": "FFMpeg/Filters/Video/ClipFilter.html", "link": "FFMpeg/Filters/Video/ClipFilter.html#method_apply", "name": "FFMpeg\\Filters\\Video\\ClipFilter::apply", "doc": "&quot;Applies the filter on the the Video media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Video", "fromLink": "FFMpeg/Filters/Video.html", "link": "FFMpeg/Filters/Video/CropFilter.html", "name": "FFMpeg\\Filters\\Video\\CropFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\CropFilter", "fromLink": "FFMpeg/Filters/Video/CropFilter.html", "link": "FFMpeg/Filters/Video/CropFilter.html#method___construct", "name": "FFMpeg\\Filters\\Video\\CropFilter::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\CropFilter", "fromLink": "FFMpeg/Filters/Video/CropFilter.html", "link": "FFMpeg/Filters/Video/CropFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Video\\CropFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\CropFilter", "fromLink": "FFMpeg/Filters/Video/CropFilter.html", "link": "FFMpeg/Filters/Video/CropFilter.html#method_apply", "name": "FFMpeg\\Filters\\Video\\CropFilter::apply", "doc": "&quot;Applies the filter on the the Video media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Video", "fromLink": "FFMpeg/Filters/Video.html", "link": "FFMpeg/Filters/Video/CustomFilter.html", "name": "FFMpeg\\Filters\\Video\\CustomFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\CustomFilter", "fromLink": "FFMpeg/Filters/Video/CustomFilter.html", "link": "FFMpeg/Filters/Video/CustomFilter.html#method___construct", "name": "FFMpeg\\Filters\\Video\\CustomFilter::__construct", "doc": "&quot;A custom filter, useful if you want to build complex filters&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\CustomFilter", "fromLink": "FFMpeg/Filters/Video/CustomFilter.html", "link": "FFMpeg/Filters/Video/CustomFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Video\\CustomFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\CustomFilter", "fromLink": "FFMpeg/Filters/Video/CustomFilter.html", "link": "FFMpeg/Filters/Video/CustomFilter.html#method_apply", "name": "FFMpeg\\Filters\\Video\\CustomFilter::apply", "doc": "&quot;Applies the filter on the the Video media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Video", "fromLink": "FFMpeg/Filters/Video.html", "link": "FFMpeg/Filters/Video/ExtractMultipleFramesFilter.html", "name": "FFMpeg\\Filters\\Video\\ExtractMultipleFramesFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ExtractMultipleFramesFilter", "fromLink": "FFMpeg/Filters/Video/ExtractMultipleFramesFilter.html", "link": "FFMpeg/Filters/Video/ExtractMultipleFramesFilter.html#method___construct", "name": "FFMpeg\\Filters\\Video\\ExtractMultipleFramesFilter::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ExtractMultipleFramesFilter", "fromLink": "FFMpeg/Filters/Video/ExtractMultipleFramesFilter.html", "link": "FFMpeg/Filters/Video/ExtractMultipleFramesFilter.html#method_setFrameFileType", "name": "FFMpeg\\Filters\\Video\\ExtractMultipleFramesFilter::setFrameFileType", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ExtractMultipleFramesFilter", "fromLink": "FFMpeg/Filters/Video/ExtractMultipleFramesFilter.html", "link": "FFMpeg/Filters/Video/ExtractMultipleFramesFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Video\\ExtractMultipleFramesFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ExtractMultipleFramesFilter", "fromLink": "FFMpeg/Filters/Video/ExtractMultipleFramesFilter.html", "link": "FFMpeg/Filters/Video/ExtractMultipleFramesFilter.html#method_getFrameRate", "name": "FFMpeg\\Filters\\Video\\ExtractMultipleFramesFilter::getFrameRate", "doc": "&quot;{@inheritdoc}&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ExtractMultipleFramesFilter", "fromLink": "FFMpeg/Filters/Video/ExtractMultipleFramesFilter.html", "link": "FFMpeg/Filters/Video/ExtractMultipleFramesFilter.html#method_getDestinationFolder", "name": "FFMpeg\\Filters\\Video\\ExtractMultipleFramesFilter::getDestinationFolder", "doc": "&quot;{@inheritdoc}&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ExtractMultipleFramesFilter", "fromLink": "FFMpeg/Filters/Video/ExtractMultipleFramesFilter.html", "link": "FFMpeg/Filters/Video/ExtractMultipleFramesFilter.html#method_apply", "name": "FFMpeg\\Filters\\Video\\ExtractMultipleFramesFilter::apply", "doc": "&quot;Applies the filter on the the Video media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Video", "fromLink": "FFMpeg/Filters/Video.html", "link": "FFMpeg/Filters/Video/FrameRateFilter.html", "name": "FFMpeg\\Filters\\Video\\FrameRateFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\FrameRateFilter", "fromLink": "FFMpeg/Filters/Video/FrameRateFilter.html", "link": "FFMpeg/Filters/Video/FrameRateFilter.html#method___construct", "name": "FFMpeg\\Filters\\Video\\FrameRateFilter::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\FrameRateFilter", "fromLink": "FFMpeg/Filters/Video/FrameRateFilter.html", "link": "FFMpeg/Filters/Video/FrameRateFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Video\\FrameRateFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\FrameRateFilter", "fromLink": "FFMpeg/Filters/Video/FrameRateFilter.html", "link": "FFMpeg/Filters/Video/FrameRateFilter.html#method_getFrameRate", "name": "FFMpeg\\Filters\\Video\\FrameRateFilter::getFrameRate", "doc": "&quot;Returns the frame rate.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\FrameRateFilter", "fromLink": "FFMpeg/Filters/Video/FrameRateFilter.html", "link": "FFMpeg/Filters/Video/FrameRateFilter.html#method_getGOP", "name": "FFMpeg\\Filters\\Video\\FrameRateFilter::getGOP", "doc": "&quot;Returns the GOP size.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\FrameRateFilter", "fromLink": "FFMpeg/Filters/Video/FrameRateFilter.html", "link": "FFMpeg/Filters/Video/FrameRateFilter.html#method_apply", "name": "FFMpeg\\Filters\\Video\\FrameRateFilter::apply", "doc": "&quot;Applies the filter on the the Video media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Video", "fromLink": "FFMpeg/Filters/Video.html", "link": "FFMpeg/Filters/Video/PadFilter.html", "name": "FFMpeg\\Filters\\Video\\PadFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\PadFilter", "fromLink": "FFMpeg/Filters/Video/PadFilter.html", "link": "FFMpeg/Filters/Video/PadFilter.html#method___construct", "name": "FFMpeg\\Filters\\Video\\PadFilter::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\PadFilter", "fromLink": "FFMpeg/Filters/Video/PadFilter.html", "link": "FFMpeg/Filters/Video/PadFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Video\\PadFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\PadFilter", "fromLink": "FFMpeg/Filters/Video/PadFilter.html", "link": "FFMpeg/Filters/Video/PadFilter.html#method_getDimension", "name": "FFMpeg\\Filters\\Video\\PadFilter::getDimension", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\PadFilter", "fromLink": "FFMpeg/Filters/Video/PadFilter.html", "link": "FFMpeg/Filters/Video/PadFilter.html#method_apply", "name": "FFMpeg\\Filters\\Video\\PadFilter::apply", "doc": "&quot;Applies the filter on the the Video media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Video", "fromLink": "FFMpeg/Filters/Video.html", "link": "FFMpeg/Filters/Video/ResizeFilter.html", "name": "FFMpeg\\Filters\\Video\\ResizeFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ResizeFilter", "fromLink": "FFMpeg/Filters/Video/ResizeFilter.html", "link": "FFMpeg/Filters/Video/ResizeFilter.html#method___construct", "name": "FFMpeg\\Filters\\Video\\ResizeFilter::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ResizeFilter", "fromLink": "FFMpeg/Filters/Video/ResizeFilter.html", "link": "FFMpeg/Filters/Video/ResizeFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Video\\ResizeFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ResizeFilter", "fromLink": "FFMpeg/Filters/Video/ResizeFilter.html", "link": "FFMpeg/Filters/Video/ResizeFilter.html#method_getDimension", "name": "FFMpeg\\Filters\\Video\\ResizeFilter::getDimension", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ResizeFilter", "fromLink": "FFMpeg/Filters/Video/ResizeFilter.html", "link": "FFMpeg/Filters/Video/ResizeFilter.html#method_getMode", "name": "FFMpeg\\Filters\\Video\\ResizeFilter::getMode", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ResizeFilter", "fromLink": "FFMpeg/Filters/Video/ResizeFilter.html", "link": "FFMpeg/Filters/Video/ResizeFilter.html#method_areStandardsForced", "name": "FFMpeg\\Filters\\Video\\ResizeFilter::areStandardsForced", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\ResizeFilter", "fromLink": "FFMpeg/Filters/Video/ResizeFilter.html", "link": "FFMpeg/Filters/Video/ResizeFilter.html#method_apply", "name": "FFMpeg\\Filters\\Video\\ResizeFilter::apply", "doc": "&quot;Applies the filter on the the Video media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Video", "fromLink": "FFMpeg/Filters/Video.html", "link": "FFMpeg/Filters/Video/RotateFilter.html", "name": "FFMpeg\\Filters\\Video\\RotateFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\RotateFilter", "fromLink": "FFMpeg/Filters/Video/RotateFilter.html", "link": "FFMpeg/Filters/Video/RotateFilter.html#method___construct", "name": "FFMpeg\\Filters\\Video\\RotateFilter::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\RotateFilter", "fromLink": "FFMpeg/Filters/Video/RotateFilter.html", "link": "FFMpeg/Filters/Video/RotateFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Video\\RotateFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\RotateFilter", "fromLink": "FFMpeg/Filters/Video/RotateFilter.html", "link": "FFMpeg/Filters/Video/RotateFilter.html#method_getAngle", "name": "FFMpeg\\Filters\\Video\\RotateFilter::getAngle", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\RotateFilter", "fromLink": "FFMpeg/Filters/Video/RotateFilter.html", "link": "FFMpeg/Filters/Video/RotateFilter.html#method_apply", "name": "FFMpeg\\Filters\\Video\\RotateFilter::apply", "doc": "&quot;Applies the filter on the the Video media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Video", "fromLink": "FFMpeg/Filters/Video.html", "link": "FFMpeg/Filters/Video/SynchronizeFilter.html", "name": "FFMpeg\\Filters\\Video\\SynchronizeFilter", "doc": "&quot;Synchronizes audio and video in case of desynchronized movies.&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\SynchronizeFilter", "fromLink": "FFMpeg/Filters/Video/SynchronizeFilter.html", "link": "FFMpeg/Filters/Video/SynchronizeFilter.html#method___construct", "name": "FFMpeg\\Filters\\Video\\SynchronizeFilter::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\SynchronizeFilter", "fromLink": "FFMpeg/Filters/Video/SynchronizeFilter.html", "link": "FFMpeg/Filters/Video/SynchronizeFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Video\\SynchronizeFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\SynchronizeFilter", "fromLink": "FFMpeg/Filters/Video/SynchronizeFilter.html", "link": "FFMpeg/Filters/Video/SynchronizeFilter.html#method_apply", "name": "FFMpeg\\Filters\\Video\\SynchronizeFilter::apply", "doc": "&quot;Applies the filter on the the Video media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Video", "fromLink": "FFMpeg/Filters/Video.html", "link": "FFMpeg/Filters/Video/VideoFilterInterface.html", "name": "FFMpeg\\Filters\\Video\\VideoFilterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\VideoFilterInterface", "fromLink": "FFMpeg/Filters/Video/VideoFilterInterface.html", "link": "FFMpeg/Filters/Video/VideoFilterInterface.html#method_apply", "name": "FFMpeg\\Filters\\Video\\VideoFilterInterface::apply", "doc": "&quot;Applies the filter on the the Video media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Video", "fromLink": "FFMpeg/Filters/Video.html", "link": "FFMpeg/Filters/Video/VideoFilters.html", "name": "FFMpeg\\Filters\\Video\\VideoFilters", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\VideoFilters", "fromLink": "FFMpeg/Filters/Video/VideoFilters.html", "link": "FFMpeg/Filters/Video/VideoFilters.html#method___construct", "name": "FFMpeg\\Filters\\Video\\VideoFilters::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\VideoFilters", "fromLink": "FFMpeg/Filters/Video/VideoFilters.html", "link": "FFMpeg/Filters/Video/VideoFilters.html#method_resize", "name": "FFMpeg\\Filters\\Video\\VideoFilters::resize", "doc": "&quot;Resizes a video to a given dimension.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\VideoFilters", "fromLink": "FFMpeg/Filters/Video/VideoFilters.html", "link": "FFMpeg/Filters/Video/VideoFilters.html#method_framerate", "name": "FFMpeg\\Filters\\Video\\VideoFilters::framerate", "doc": "&quot;Changes the video framerate.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\VideoFilters", "fromLink": "FFMpeg/Filters/Video/VideoFilters.html", "link": "FFMpeg/Filters/Video/VideoFilters.html#method_extractMultipleFrames", "name": "FFMpeg\\Filters\\Video\\VideoFilters::extractMultipleFrames", "doc": "&quot;Extract multiple frames from the video&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\VideoFilters", "fromLink": "FFMpeg/Filters/Video/VideoFilters.html", "link": "FFMpeg/Filters/Video/VideoFilters.html#method_synchronize", "name": "FFMpeg\\Filters\\Video\\VideoFilters::synchronize", "doc": "&quot;Synchronizes audio and video.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\VideoFilters", "fromLink": "FFMpeg/Filters/Video/VideoFilters.html", "link": "FFMpeg/Filters/Video/VideoFilters.html#method_clip", "name": "FFMpeg\\Filters\\Video\\VideoFilters::clip", "doc": "&quot;Clips (cuts) the video.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\VideoFilters", "fromLink": "FFMpeg/Filters/Video/VideoFilters.html", "link": "FFMpeg/Filters/Video/VideoFilters.html#method_audioResample", "name": "FFMpeg\\Filters\\Video\\VideoFilters::audioResample", "doc": "&quot;Resamples the audio file.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\VideoFilters", "fromLink": "FFMpeg/Filters/Video/VideoFilters.html", "link": "FFMpeg/Filters/Video/VideoFilters.html#method_pad", "name": "FFMpeg\\Filters\\Video\\VideoFilters::pad", "doc": "&quot;Adds padding (black bars) to a video.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\VideoFilters", "fromLink": "FFMpeg/Filters/Video/VideoFilters.html", "link": "FFMpeg/Filters/Video/VideoFilters.html#method_rotate", "name": "FFMpeg\\Filters\\Video\\VideoFilters::rotate", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\VideoFilters", "fromLink": "FFMpeg/Filters/Video/VideoFilters.html", "link": "FFMpeg/Filters/Video/VideoFilters.html#method_crop", "name": "FFMpeg\\Filters\\Video\\VideoFilters::crop", "doc": "&quot;Crops the video&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\VideoFilters", "fromLink": "FFMpeg/Filters/Video/VideoFilters.html", "link": "FFMpeg/Filters/Video/VideoFilters.html#method_watermark", "name": "FFMpeg\\Filters\\Video\\VideoFilters::watermark", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\VideoFilters", "fromLink": "FFMpeg/Filters/Video/VideoFilters.html", "link": "FFMpeg/Filters/Video/VideoFilters.html#method_custom", "name": "FFMpeg\\Filters\\Video\\VideoFilters::custom", "doc": "&quot;Applies a custom filter: -vf foo bar&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Video", "fromLink": "FFMpeg/Filters/Video.html", "link": "FFMpeg/Filters/Video/WatermarkFilter.html", "name": "FFMpeg\\Filters\\Video\\WatermarkFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\WatermarkFilter", "fromLink": "FFMpeg/Filters/Video/WatermarkFilter.html", "link": "FFMpeg/Filters/Video/WatermarkFilter.html#method___construct", "name": "FFMpeg\\Filters\\Video\\WatermarkFilter::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\WatermarkFilter", "fromLink": "FFMpeg/Filters/Video/WatermarkFilter.html", "link": "FFMpeg/Filters/Video/WatermarkFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Video\\WatermarkFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Video\\WatermarkFilter", "fromLink": "FFMpeg/Filters/Video/WatermarkFilter.html", "link": "FFMpeg/Filters/Video/WatermarkFilter.html#method_apply", "name": "FFMpeg\\Filters\\Video\\WatermarkFilter::apply", "doc": "&quot;Applies the filter on the the Video media given an format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Waveform", "fromLink": "FFMpeg/Filters/Waveform.html", "link": "FFMpeg/Filters/Waveform/WaveformDownmixFilter.html", "name": "FFMpeg\\Filters\\Waveform\\WaveformDownmixFilter", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Waveform\\WaveformDownmixFilter", "fromLink": "FFMpeg/Filters/Waveform/WaveformDownmixFilter.html", "link": "FFMpeg/Filters/Waveform/WaveformDownmixFilter.html#method___construct", "name": "FFMpeg\\Filters\\Waveform\\WaveformDownmixFilter::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Waveform\\WaveformDownmixFilter", "fromLink": "FFMpeg/Filters/Waveform/WaveformDownmixFilter.html", "link": "FFMpeg/Filters/Waveform/WaveformDownmixFilter.html#method_getDownmix", "name": "FFMpeg\\Filters\\Waveform\\WaveformDownmixFilter::getDownmix", "doc": "&quot;{@inheritdoc}&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Waveform\\WaveformDownmixFilter", "fromLink": "FFMpeg/Filters/Waveform/WaveformDownmixFilter.html", "link": "FFMpeg/Filters/Waveform/WaveformDownmixFilter.html#method_getPriority", "name": "FFMpeg\\Filters\\Waveform\\WaveformDownmixFilter::getPriority", "doc": "&quot;Returns the priority of the filter.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Waveform\\WaveformDownmixFilter", "fromLink": "FFMpeg/Filters/Waveform/WaveformDownmixFilter.html", "link": "FFMpeg/Filters/Waveform/WaveformDownmixFilter.html#method_apply", "name": "FFMpeg\\Filters\\Waveform\\WaveformDownmixFilter::apply", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Waveform", "fromLink": "FFMpeg/Filters/Waveform.html", "link": "FFMpeg/Filters/Waveform/WaveformFilterInterface.html", "name": "FFMpeg\\Filters\\Waveform\\WaveformFilterInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Waveform\\WaveformFilterInterface", "fromLink": "FFMpeg/Filters/Waveform/WaveformFilterInterface.html", "link": "FFMpeg/Filters/Waveform/WaveformFilterInterface.html#method_apply", "name": "FFMpeg\\Filters\\Waveform\\WaveformFilterInterface::apply", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Filters\\Waveform", "fromLink": "FFMpeg/Filters/Waveform.html", "link": "FFMpeg/Filters/Waveform/WaveformFilters.html", "name": "FFMpeg\\Filters\\Waveform\\WaveformFilters", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Filters\\Waveform\\WaveformFilters", "fromLink": "FFMpeg/Filters/Waveform/WaveformFilters.html", "link": "FFMpeg/Filters/Waveform/WaveformFilters.html#method___construct", "name": "FFMpeg\\Filters\\Waveform\\WaveformFilters::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Filters\\Waveform\\WaveformFilters", "fromLink": "FFMpeg/Filters/Waveform/WaveformFilters.html", "link": "FFMpeg/Filters/Waveform/WaveformFilters.html#method_setDownmix", "name": "FFMpeg\\Filters\\Waveform\\WaveformFilters::setDownmix", "doc": "&quot;Sets the downmix of the output waveform.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format", "fromLink": "FFMpeg/Format.html", "link": "FFMpeg/Format/AudioInterface.html", "name": "FFMpeg\\Format\\AudioInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\AudioInterface", "fromLink": "FFMpeg/Format/AudioInterface.html", "link": "FFMpeg/Format/AudioInterface.html#method_getAudioKiloBitrate", "name": "FFMpeg\\Format\\AudioInterface::getAudioKiloBitrate", "doc": "&quot;Gets the audio kiloBitrate value.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\AudioInterface", "fromLink": "FFMpeg/Format/AudioInterface.html", "link": "FFMpeg/Format/AudioInterface.html#method_getAudioChannels", "name": "FFMpeg\\Format\\AudioInterface::getAudioChannels", "doc": "&quot;Gets the audio channels value.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\AudioInterface", "fromLink": "FFMpeg/Format/AudioInterface.html", "link": "FFMpeg/Format/AudioInterface.html#method_getAudioCodec", "name": "FFMpeg\\Format\\AudioInterface::getAudioCodec", "doc": "&quot;Returns the audio codec.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\AudioInterface", "fromLink": "FFMpeg/Format/AudioInterface.html", "link": "FFMpeg/Format/AudioInterface.html#method_getAvailableAudioCodecs", "name": "FFMpeg\\Format\\AudioInterface::getAvailableAudioCodecs", "doc": "&quot;Returns the list of available audio codecs for this format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format\\Audio", "fromLink": "FFMpeg/Format/Audio.html", "link": "FFMpeg/Format/Audio/Aac.html", "name": "FFMpeg\\Format\\Audio\\Aac", "doc": "&quot;The AAC audio format&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\Aac", "fromLink": "FFMpeg/Format/Audio/Aac.html", "link": "FFMpeg/Format/Audio/Aac.html#method___construct", "name": "FFMpeg\\Format\\Audio\\Aac::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\Aac", "fromLink": "FFMpeg/Format/Audio/Aac.html", "link": "FFMpeg/Format/Audio/Aac.html#method_getAvailableAudioCodecs", "name": "FFMpeg\\Format\\Audio\\Aac::getAvailableAudioCodecs", "doc": "&quot;Returns the list of available audio codecs for this format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format\\Audio", "fromLink": "FFMpeg/Format/Audio.html", "link": "FFMpeg/Format/Audio/DefaultAudio.html", "name": "FFMpeg\\Format\\Audio\\DefaultAudio", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\DefaultAudio", "fromLink": "FFMpeg/Format/Audio/DefaultAudio.html", "link": "FFMpeg/Format/Audio/DefaultAudio.html#method_getExtraParams", "name": "FFMpeg\\Format\\Audio\\DefaultAudio::getExtraParams", "doc": "&quot;Returns an array of extra parameters to add to ffmpeg commandline.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\DefaultAudio", "fromLink": "FFMpeg/Format/Audio/DefaultAudio.html", "link": "FFMpeg/Format/Audio/DefaultAudio.html#method_getAudioCodec", "name": "FFMpeg\\Format\\Audio\\DefaultAudio::getAudioCodec", "doc": "&quot;Returns the audio codec.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\DefaultAudio", "fromLink": "FFMpeg/Format/Audio/DefaultAudio.html", "link": "FFMpeg/Format/Audio/DefaultAudio.html#method_setAudioCodec", "name": "FFMpeg\\Format\\Audio\\DefaultAudio::setAudioCodec", "doc": "&quot;Sets the audio codec, Should be in the available ones, otherwise an\nexception is thrown.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\DefaultAudio", "fromLink": "FFMpeg/Format/Audio/DefaultAudio.html", "link": "FFMpeg/Format/Audio/DefaultAudio.html#method_getAudioKiloBitrate", "name": "FFMpeg\\Format\\Audio\\DefaultAudio::getAudioKiloBitrate", "doc": "&quot;Gets the audio kiloBitrate value.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\DefaultAudio", "fromLink": "FFMpeg/Format/Audio/DefaultAudio.html", "link": "FFMpeg/Format/Audio/DefaultAudio.html#method_setAudioKiloBitrate", "name": "FFMpeg\\Format\\Audio\\DefaultAudio::setAudioKiloBitrate", "doc": "&quot;Sets the kiloBitrate value.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\DefaultAudio", "fromLink": "FFMpeg/Format/Audio/DefaultAudio.html", "link": "FFMpeg/Format/Audio/DefaultAudio.html#method_getAudioChannels", "name": "FFMpeg\\Format\\Audio\\DefaultAudio::getAudioChannels", "doc": "&quot;Gets the audio channels value.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\DefaultAudio", "fromLink": "FFMpeg/Format/Audio/DefaultAudio.html", "link": "FFMpeg/Format/Audio/DefaultAudio.html#method_setAudioChannels", "name": "FFMpeg\\Format\\Audio\\DefaultAudio::setAudioChannels", "doc": "&quot;Sets the channels value.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\DefaultAudio", "fromLink": "FFMpeg/Format/Audio/DefaultAudio.html", "link": "FFMpeg/Format/Audio/DefaultAudio.html#method_createProgressListener", "name": "FFMpeg\\Format\\Audio\\DefaultAudio::createProgressListener", "doc": "&quot;Creates the progress listener.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\DefaultAudio", "fromLink": "FFMpeg/Format/Audio/DefaultAudio.html", "link": "FFMpeg/Format/Audio/DefaultAudio.html#method_getPasses", "name": "FFMpeg\\Format\\Audio\\DefaultAudio::getPasses", "doc": "&quot;Returns the number of passes.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format\\Audio", "fromLink": "FFMpeg/Format/Audio.html", "link": "FFMpeg/Format/Audio/Flac.html", "name": "FFMpeg\\Format\\Audio\\Flac", "doc": "&quot;The Flac audio format&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\Flac", "fromLink": "FFMpeg/Format/Audio/Flac.html", "link": "FFMpeg/Format/Audio/Flac.html#method___construct", "name": "FFMpeg\\Format\\Audio\\Flac::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\Flac", "fromLink": "FFMpeg/Format/Audio/Flac.html", "link": "FFMpeg/Format/Audio/Flac.html#method_getAvailableAudioCodecs", "name": "FFMpeg\\Format\\Audio\\Flac::getAvailableAudioCodecs", "doc": "&quot;Returns the list of available audio codecs for this format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format\\Audio", "fromLink": "FFMpeg/Format/Audio.html", "link": "FFMpeg/Format/Audio/Mp3.html", "name": "FFMpeg\\Format\\Audio\\Mp3", "doc": "&quot;The MP3 audio format&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\Mp3", "fromLink": "FFMpeg/Format/Audio/Mp3.html", "link": "FFMpeg/Format/Audio/Mp3.html#method___construct", "name": "FFMpeg\\Format\\Audio\\Mp3::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\Mp3", "fromLink": "FFMpeg/Format/Audio/Mp3.html", "link": "FFMpeg/Format/Audio/Mp3.html#method_getAvailableAudioCodecs", "name": "FFMpeg\\Format\\Audio\\Mp3::getAvailableAudioCodecs", "doc": "&quot;Returns the list of available audio codecs for this format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format\\Audio", "fromLink": "FFMpeg/Format/Audio.html", "link": "FFMpeg/Format/Audio/Vorbis.html", "name": "FFMpeg\\Format\\Audio\\Vorbis", "doc": "&quot;The Vorbis audio format&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\Vorbis", "fromLink": "FFMpeg/Format/Audio/Vorbis.html", "link": "FFMpeg/Format/Audio/Vorbis.html#method___construct", "name": "FFMpeg\\Format\\Audio\\Vorbis::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\Vorbis", "fromLink": "FFMpeg/Format/Audio/Vorbis.html", "link": "FFMpeg/Format/Audio/Vorbis.html#method_getExtraParams", "name": "FFMpeg\\Format\\Audio\\Vorbis::getExtraParams", "doc": "&quot;Returns an array of extra parameters to add to ffmpeg commandline.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\Vorbis", "fromLink": "FFMpeg/Format/Audio/Vorbis.html", "link": "FFMpeg/Format/Audio/Vorbis.html#method_getAvailableAudioCodecs", "name": "FFMpeg\\Format\\Audio\\Vorbis::getAvailableAudioCodecs", "doc": "&quot;Returns the list of available audio codecs for this format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format\\Audio", "fromLink": "FFMpeg/Format/Audio.html", "link": "FFMpeg/Format/Audio/Wav.html", "name": "FFMpeg\\Format\\Audio\\Wav", "doc": "&quot;The WAV audio format&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\Wav", "fromLink": "FFMpeg/Format/Audio/Wav.html", "link": "FFMpeg/Format/Audio/Wav.html#method___construct", "name": "FFMpeg\\Format\\Audio\\Wav::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Audio\\Wav", "fromLink": "FFMpeg/Format/Audio/Wav.html", "link": "FFMpeg/Format/Audio/Wav.html#method_getAvailableAudioCodecs", "name": "FFMpeg\\Format\\Audio\\Wav::getAvailableAudioCodecs", "doc": "&quot;Returns the list of available audio codecs for this format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format", "fromLink": "FFMpeg/Format.html", "link": "FFMpeg/Format/FormatInterface.html", "name": "FFMpeg\\Format\\FormatInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\FormatInterface", "fromLink": "FFMpeg/Format/FormatInterface.html", "link": "FFMpeg/Format/FormatInterface.html#method_getPasses", "name": "FFMpeg\\Format\\FormatInterface::getPasses", "doc": "&quot;Returns the number of passes.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\FormatInterface", "fromLink": "FFMpeg/Format/FormatInterface.html", "link": "FFMpeg/Format/FormatInterface.html#method_getExtraParams", "name": "FFMpeg\\Format\\FormatInterface::getExtraParams", "doc": "&quot;Returns an array of extra parameters to add to ffmpeg commandline.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format", "fromLink": "FFMpeg/Format.html", "link": "FFMpeg/Format/FrameInterface.html", "name": "FFMpeg\\Format\\FrameInterface", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "FFMpeg\\Format\\ProgressListener", "fromLink": "FFMpeg/Format/ProgressListener.html", "link": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html", "name": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener", "fromLink": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html", "link": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html#method___construct", "name": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener", "fromLink": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html", "link": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html#method_getFFProbe", "name": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener::getFFProbe", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener", "fromLink": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html", "link": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html#method_getPathfile", "name": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener::getPathfile", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener", "fromLink": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html", "link": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html#method_getCurrentPass", "name": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener::getCurrentPass", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener", "fromLink": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html", "link": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html#method_getTotalPass", "name": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener::getTotalPass", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener", "fromLink": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html", "link": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html#method_getCurrentTime", "name": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener::getCurrentTime", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener", "fromLink": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html", "link": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html#method_handle", "name": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener::handle", "doc": "&quot;{@inheritdoc}&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener", "fromLink": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html", "link": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html#method_forwardedEvents", "name": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener::forwardedEvents", "doc": "&quot;{@inheritdoc}&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener", "fromLink": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html", "link": "FFMpeg/Format/ProgressListener/AbstractProgressListener.html#method_getPattern", "name": "FFMpeg\\Format\\ProgressListener\\AbstractProgressListener::getPattern", "doc": "&quot;Get the regex pattern to match a ffmpeg stderr status line&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format\\ProgressListener", "fromLink": "FFMpeg/Format/ProgressListener.html", "link": "FFMpeg/Format/ProgressListener/AudioProgressListener.html", "name": "FFMpeg\\Format\\ProgressListener\\AudioProgressListener", "doc": "&quot;Parses ffmpeg stderr progress information. An example:&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\ProgressListener\\AudioProgressListener", "fromLink": "FFMpeg/Format/ProgressListener/AudioProgressListener.html", "link": "FFMpeg/Format/ProgressListener/AudioProgressListener.html#method_getPattern", "name": "FFMpeg\\Format\\ProgressListener\\AudioProgressListener::getPattern", "doc": "&quot;Get the regex pattern to match a ffmpeg stderr status line&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format\\ProgressListener", "fromLink": "FFMpeg/Format/ProgressListener.html", "link": "FFMpeg/Format/ProgressListener/VideoProgressListener.html", "name": "FFMpeg\\Format\\ProgressListener\\VideoProgressListener", "doc": "&quot;Parses ffmpeg stderr progress information for video files. An example:&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\ProgressListener\\VideoProgressListener", "fromLink": "FFMpeg/Format/ProgressListener/VideoProgressListener.html", "link": "FFMpeg/Format/ProgressListener/VideoProgressListener.html#method_getPattern", "name": "FFMpeg\\Format\\ProgressListener\\VideoProgressListener::getPattern", "doc": "&quot;Get the regex pattern to match a ffmpeg stderr status line&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format", "fromLink": "FFMpeg/Format.html", "link": "FFMpeg/Format/ProgressableInterface.html", "name": "FFMpeg\\Format\\ProgressableInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\ProgressableInterface", "fromLink": "FFMpeg/Format/ProgressableInterface.html", "link": "FFMpeg/Format/ProgressableInterface.html#method_createProgressListener", "name": "FFMpeg\\Format\\ProgressableInterface::createProgressListener", "doc": "&quot;Creates the progress listener.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format", "fromLink": "FFMpeg/Format.html", "link": "FFMpeg/Format/VideoInterface.html", "name": "FFMpeg\\Format\\VideoInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\VideoInterface", "fromLink": "FFMpeg/Format/VideoInterface.html", "link": "FFMpeg/Format/VideoInterface.html#method_getKiloBitrate", "name": "FFMpeg\\Format\\VideoInterface::getKiloBitrate", "doc": "&quot;Gets the kiloBitrate value.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\VideoInterface", "fromLink": "FFMpeg/Format/VideoInterface.html", "link": "FFMpeg/Format/VideoInterface.html#method_getModulus", "name": "FFMpeg\\Format\\VideoInterface::getModulus", "doc": "&quot;Returns the modulus used by the Resizable video.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\VideoInterface", "fromLink": "FFMpeg/Format/VideoInterface.html", "link": "FFMpeg/Format/VideoInterface.html#method_getVideoCodec", "name": "FFMpeg\\Format\\VideoInterface::getVideoCodec", "doc": "&quot;Returns the video codec.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\VideoInterface", "fromLink": "FFMpeg/Format/VideoInterface.html", "link": "FFMpeg/Format/VideoInterface.html#method_supportBFrames", "name": "FFMpeg\\Format\\VideoInterface::supportBFrames", "doc": "&quot;Returns true if the current format supports B-Frames.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\VideoInterface", "fromLink": "FFMpeg/Format/VideoInterface.html", "link": "FFMpeg/Format/VideoInterface.html#method_getAvailableVideoCodecs", "name": "FFMpeg\\Format\\VideoInterface::getAvailableVideoCodecs", "doc": "&quot;Returns the list of available video codecs for this format.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\VideoInterface", "fromLink": "FFMpeg/Format/VideoInterface.html", "link": "FFMpeg/Format/VideoInterface.html#method_getAdditionalParameters", "name": "FFMpeg\\Format\\VideoInterface::getAdditionalParameters", "doc": "&quot;Returns the list of available video codecs for this format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format\\Video", "fromLink": "FFMpeg/Format/Video.html", "link": "FFMpeg/Format/Video/DefaultVideo.html", "name": "FFMpeg\\Format\\Video\\DefaultVideo", "doc": "&quot;The abstract default Video format&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\DefaultVideo", "fromLink": "FFMpeg/Format/Video/DefaultVideo.html", "link": "FFMpeg/Format/Video/DefaultVideo.html#method_getKiloBitrate", "name": "FFMpeg\\Format\\Video\\DefaultVideo::getKiloBitrate", "doc": "&quot;Gets the kiloBitrate value.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\DefaultVideo", "fromLink": "FFMpeg/Format/Video/DefaultVideo.html", "link": "FFMpeg/Format/Video/DefaultVideo.html#method_setKiloBitrate", "name": "FFMpeg\\Format\\Video\\DefaultVideo::setKiloBitrate", "doc": "&quot;Sets the kiloBitrate value.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\DefaultVideo", "fromLink": "FFMpeg/Format/Video/DefaultVideo.html", "link": "FFMpeg/Format/Video/DefaultVideo.html#method_getVideoCodec", "name": "FFMpeg\\Format\\Video\\DefaultVideo::getVideoCodec", "doc": "&quot;Returns the video codec.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\DefaultVideo", "fromLink": "FFMpeg/Format/Video/DefaultVideo.html", "link": "FFMpeg/Format/Video/DefaultVideo.html#method_setVideoCodec", "name": "FFMpeg\\Format\\Video\\DefaultVideo::setVideoCodec", "doc": "&quot;Sets the video codec, Should be in the available ones, otherwise an\nexception is thrown.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\DefaultVideo", "fromLink": "FFMpeg/Format/Video/DefaultVideo.html", "link": "FFMpeg/Format/Video/DefaultVideo.html#method_getModulus", "name": "FFMpeg\\Format\\Video\\DefaultVideo::getModulus", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\DefaultVideo", "fromLink": "FFMpeg/Format/Video/DefaultVideo.html", "link": "FFMpeg/Format/Video/DefaultVideo.html#method_getAdditionalParameters", "name": "FFMpeg\\Format\\Video\\DefaultVideo::getAdditionalParameters", "doc": "&quot;Returns the list of available video codecs for this format.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\DefaultVideo", "fromLink": "FFMpeg/Format/Video/DefaultVideo.html", "link": "FFMpeg/Format/Video/DefaultVideo.html#method_setAdditionalParameters", "name": "FFMpeg\\Format\\Video\\DefaultVideo::setAdditionalParameters", "doc": "&quot;Sets additional parameters.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\DefaultVideo", "fromLink": "FFMpeg/Format/Video/DefaultVideo.html", "link": "FFMpeg/Format/Video/DefaultVideo.html#method_createProgressListener", "name": "FFMpeg\\Format\\Video\\DefaultVideo::createProgressListener", "doc": "&quot;Creates the progress listener.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format\\Video", "fromLink": "FFMpeg/Format/Video.html", "link": "FFMpeg/Format/Video/Ogg.html", "name": "FFMpeg\\Format\\Video\\Ogg", "doc": "&quot;The Ogg video format&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\Ogg", "fromLink": "FFMpeg/Format/Video/Ogg.html", "link": "FFMpeg/Format/Video/Ogg.html#method___construct", "name": "FFMpeg\\Format\\Video\\Ogg::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\Ogg", "fromLink": "FFMpeg/Format/Video/Ogg.html", "link": "FFMpeg/Format/Video/Ogg.html#method_supportBFrames", "name": "FFMpeg\\Format\\Video\\Ogg::supportBFrames", "doc": "&quot;Returns true if the current format supports B-Frames.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\Ogg", "fromLink": "FFMpeg/Format/Video/Ogg.html", "link": "FFMpeg/Format/Video/Ogg.html#method_getAvailableAudioCodecs", "name": "FFMpeg\\Format\\Video\\Ogg::getAvailableAudioCodecs", "doc": "&quot;Returns the list of available audio codecs for this format.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\Ogg", "fromLink": "FFMpeg/Format/Video/Ogg.html", "link": "FFMpeg/Format/Video/Ogg.html#method_getAvailableVideoCodecs", "name": "FFMpeg\\Format\\Video\\Ogg::getAvailableVideoCodecs", "doc": "&quot;Returns the list of available video codecs for this format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format\\Video", "fromLink": "FFMpeg/Format/Video.html", "link": "FFMpeg/Format/Video/WMV.html", "name": "FFMpeg\\Format\\Video\\WMV", "doc": "&quot;The WMV video format&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\WMV", "fromLink": "FFMpeg/Format/Video/WMV.html", "link": "FFMpeg/Format/Video/WMV.html#method___construct", "name": "FFMpeg\\Format\\Video\\WMV::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\WMV", "fromLink": "FFMpeg/Format/Video/WMV.html", "link": "FFMpeg/Format/Video/WMV.html#method_supportBFrames", "name": "FFMpeg\\Format\\Video\\WMV::supportBFrames", "doc": "&quot;Returns true if the current format supports B-Frames.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\WMV", "fromLink": "FFMpeg/Format/Video/WMV.html", "link": "FFMpeg/Format/Video/WMV.html#method_getAvailableAudioCodecs", "name": "FFMpeg\\Format\\Video\\WMV::getAvailableAudioCodecs", "doc": "&quot;Returns the list of available audio codecs for this format.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\WMV", "fromLink": "FFMpeg/Format/Video/WMV.html", "link": "FFMpeg/Format/Video/WMV.html#method_getAvailableVideoCodecs", "name": "FFMpeg\\Format\\Video\\WMV::getAvailableVideoCodecs", "doc": "&quot;Returns the list of available video codecs for this format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format\\Video", "fromLink": "FFMpeg/Format/Video.html", "link": "FFMpeg/Format/Video/WMV3.html", "name": "FFMpeg\\Format\\Video\\WMV3", "doc": "&quot;The WMV video format&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\WMV3", "fromLink": "FFMpeg/Format/Video/WMV3.html", "link": "FFMpeg/Format/Video/WMV3.html#method___construct", "name": "FFMpeg\\Format\\Video\\WMV3::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\WMV3", "fromLink": "FFMpeg/Format/Video/WMV3.html", "link": "FFMpeg/Format/Video/WMV3.html#method_supportBFrames", "name": "FFMpeg\\Format\\Video\\WMV3::supportBFrames", "doc": "&quot;Returns true if the current format supports B-Frames.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\WMV3", "fromLink": "FFMpeg/Format/Video/WMV3.html", "link": "FFMpeg/Format/Video/WMV3.html#method_getAvailableAudioCodecs", "name": "FFMpeg\\Format\\Video\\WMV3::getAvailableAudioCodecs", "doc": "&quot;Returns the list of available audio codecs for this format.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\WMV3", "fromLink": "FFMpeg/Format/Video/WMV3.html", "link": "FFMpeg/Format/Video/WMV3.html#method_getAvailableVideoCodecs", "name": "FFMpeg\\Format\\Video\\WMV3::getAvailableVideoCodecs", "doc": "&quot;Returns the list of available video codecs for this format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format\\Video", "fromLink": "FFMpeg/Format/Video.html", "link": "FFMpeg/Format/Video/WebM.html", "name": "FFMpeg\\Format\\Video\\WebM", "doc": "&quot;The WebM video format&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\WebM", "fromLink": "FFMpeg/Format/Video/WebM.html", "link": "FFMpeg/Format/Video/WebM.html#method___construct", "name": "FFMpeg\\Format\\Video\\WebM::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\WebM", "fromLink": "FFMpeg/Format/Video/WebM.html", "link": "FFMpeg/Format/Video/WebM.html#method_supportBFrames", "name": "FFMpeg\\Format\\Video\\WebM::supportBFrames", "doc": "&quot;Returns true if the current format supports B-Frames.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\WebM", "fromLink": "FFMpeg/Format/Video/WebM.html", "link": "FFMpeg/Format/Video/WebM.html#method_getExtraParams", "name": "FFMpeg\\Format\\Video\\WebM::getExtraParams", "doc": "&quot;Returns an array of extra parameters to add to ffmpeg commandline.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\WebM", "fromLink": "FFMpeg/Format/Video/WebM.html", "link": "FFMpeg/Format/Video/WebM.html#method_getAvailableAudioCodecs", "name": "FFMpeg\\Format\\Video\\WebM::getAvailableAudioCodecs", "doc": "&quot;Returns the list of available audio codecs for this format.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\WebM", "fromLink": "FFMpeg/Format/Video/WebM.html", "link": "FFMpeg/Format/Video/WebM.html#method_getAvailableVideoCodecs", "name": "FFMpeg\\Format\\Video\\WebM::getAvailableVideoCodecs", "doc": "&quot;Returns the list of available video codecs for this format.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Format\\Video", "fromLink": "FFMpeg/Format/Video.html", "link": "FFMpeg/Format/Video/X264.html", "name": "FFMpeg\\Format\\Video\\X264", "doc": "&quot;The X264 video format&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\X264", "fromLink": "FFMpeg/Format/Video/X264.html", "link": "FFMpeg/Format/Video/X264.html#method___construct", "name": "FFMpeg\\Format\\Video\\X264::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\X264", "fromLink": "FFMpeg/Format/Video/X264.html", "link": "FFMpeg/Format/Video/X264.html#method_supportBFrames", "name": "FFMpeg\\Format\\Video\\X264::supportBFrames", "doc": "&quot;Returns true if the current format supports B-Frames.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\X264", "fromLink": "FFMpeg/Format/Video/X264.html", "link": "FFMpeg/Format/Video/X264.html#method_setBFramesSupport", "name": "FFMpeg\\Format\\Video\\X264::setBFramesSupport", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\X264", "fromLink": "FFMpeg/Format/Video/X264.html", "link": "FFMpeg/Format/Video/X264.html#method_getAvailableAudioCodecs", "name": "FFMpeg\\Format\\Video\\X264::getAvailableAudioCodecs", "doc": "&quot;Returns the list of available audio codecs for this format.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\X264", "fromLink": "FFMpeg/Format/Video/X264.html", "link": "FFMpeg/Format/Video/X264.html#method_getAvailableVideoCodecs", "name": "FFMpeg\\Format\\Video\\X264::getAvailableVideoCodecs", "doc": "&quot;Returns the list of available video codecs for this format.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\X264", "fromLink": "FFMpeg/Format/Video/X264.html", "link": "FFMpeg/Format/Video/X264.html#method_setPasses", "name": "FFMpeg\\Format\\Video\\X264::setPasses", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\X264", "fromLink": "FFMpeg/Format/Video/X264.html", "link": "FFMpeg/Format/Video/X264.html#method_getPasses", "name": "FFMpeg\\Format\\Video\\X264::getPasses", "doc": "&quot;Returns the number of passes.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Format\\Video\\X264", "fromLink": "FFMpeg/Format/Video/X264.html", "link": "FFMpeg/Format/Video/X264.html#method_getModulus", "name": "FFMpeg\\Format\\Video\\X264::getModulus", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Media", "fromLink": "FFMpeg/Media.html", "link": "FFMpeg/Media/AbstractMediaType.html", "name": "FFMpeg\\Media\\AbstractMediaType", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractMediaType", "fromLink": "FFMpeg/Media/AbstractMediaType.html", "link": "FFMpeg/Media/AbstractMediaType.html#method___construct", "name": "FFMpeg\\Media\\AbstractMediaType::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractMediaType", "fromLink": "FFMpeg/Media/AbstractMediaType.html", "link": "FFMpeg/Media/AbstractMediaType.html#method_getFFMpegDriver", "name": "FFMpeg\\Media\\AbstractMediaType::getFFMpegDriver", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractMediaType", "fromLink": "FFMpeg/Media/AbstractMediaType.html", "link": "FFMpeg/Media/AbstractMediaType.html#method_setFFMpegDriver", "name": "FFMpeg\\Media\\AbstractMediaType::setFFMpegDriver", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractMediaType", "fromLink": "FFMpeg/Media/AbstractMediaType.html", "link": "FFMpeg/Media/AbstractMediaType.html#method_getFFProbe", "name": "FFMpeg\\Media\\AbstractMediaType::getFFProbe", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractMediaType", "fromLink": "FFMpeg/Media/AbstractMediaType.html", "link": "FFMpeg/Media/AbstractMediaType.html#method_setFFProbe", "name": "FFMpeg\\Media\\AbstractMediaType::setFFProbe", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractMediaType", "fromLink": "FFMpeg/Media/AbstractMediaType.html", "link": "FFMpeg/Media/AbstractMediaType.html#method_getPathfile", "name": "FFMpeg\\Media\\AbstractMediaType::getPathfile", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractMediaType", "fromLink": "FFMpeg/Media/AbstractMediaType.html", "link": "FFMpeg/Media/AbstractMediaType.html#method_setFiltersCollection", "name": "FFMpeg\\Media\\AbstractMediaType::setFiltersCollection", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractMediaType", "fromLink": "FFMpeg/Media/AbstractMediaType.html", "link": "FFMpeg/Media/AbstractMediaType.html#method_getFiltersCollection", "name": "FFMpeg\\Media\\AbstractMediaType::getFiltersCollection", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractMediaType", "fromLink": "FFMpeg/Media/AbstractMediaType.html", "link": "FFMpeg/Media/AbstractMediaType.html#method_cleanupTemporaryFile", "name": "FFMpeg\\Media\\AbstractMediaType::cleanupTemporaryFile", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Media", "fromLink": "FFMpeg/Media.html", "link": "FFMpeg/Media/AbstractStreamableMedia.html", "name": "FFMpeg\\Media\\AbstractStreamableMedia", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractStreamableMedia", "fromLink": "FFMpeg/Media/AbstractStreamableMedia.html", "link": "FFMpeg/Media/AbstractStreamableMedia.html#method_getStreams", "name": "FFMpeg\\Media\\AbstractStreamableMedia::getStreams", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractStreamableMedia", "fromLink": "FFMpeg/Media/AbstractStreamableMedia.html", "link": "FFMpeg/Media/AbstractStreamableMedia.html#method_getFormat", "name": "FFMpeg\\Media\\AbstractStreamableMedia::getFormat", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Media", "fromLink": "FFMpeg/Media.html", "link": "FFMpeg/Media/AbstractVideo.html", "name": "FFMpeg\\Media\\AbstractVideo", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractVideo", "fromLink": "FFMpeg/Media/AbstractVideo.html", "link": "FFMpeg/Media/AbstractVideo.html#method_filters", "name": "FFMpeg\\Media\\AbstractVideo::filters", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractVideo", "fromLink": "FFMpeg/Media/AbstractVideo.html", "link": "FFMpeg/Media/AbstractVideo.html#method_addFilter", "name": "FFMpeg\\Media\\AbstractVideo::addFilter", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractVideo", "fromLink": "FFMpeg/Media/AbstractVideo.html", "link": "FFMpeg/Media/AbstractVideo.html#method_save", "name": "FFMpeg\\Media\\AbstractVideo::save", "doc": "&quot;Exports the video in the desired format, applies registered filters.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractVideo", "fromLink": "FFMpeg/Media/AbstractVideo.html", "link": "FFMpeg/Media/AbstractVideo.html#method_getFinalCommand", "name": "FFMpeg\\Media\\AbstractVideo::getFinalCommand", "doc": "&quot;NOTE: This method is different to the Audio&#039;s one, because Video is using passes.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractVideo", "fromLink": "FFMpeg/Media/AbstractVideo.html", "link": "FFMpeg/Media/AbstractVideo.html#method_buildCommand", "name": "FFMpeg\\Media\\AbstractVideo::buildCommand", "doc": "&quot;&lt;strong&gt;NOTE:&lt;\/strong&gt; This creates passes instead of a single command!&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\AbstractVideo", "fromLink": "FFMpeg/Media/AbstractVideo.html", "link": "FFMpeg/Media/AbstractVideo.html#method_basePartOfCommand", "name": "FFMpeg\\Media\\AbstractVideo::basePartOfCommand", "doc": "&quot;Return base part of command.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Media", "fromLink": "FFMpeg/Media.html", "link": "FFMpeg/Media/Audio.html", "name": "FFMpeg\\Media\\Audio", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Media\\Audio", "fromLink": "FFMpeg/Media/Audio.html", "link": "FFMpeg/Media/Audio.html#method_filters", "name": "FFMpeg\\Media\\Audio::filters", "doc": "&quot;Returns the available filters.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Audio", "fromLink": "FFMpeg/Media/Audio.html", "link": "FFMpeg/Media/Audio.html#method_addFilter", "name": "FFMpeg\\Media\\Audio::addFilter", "doc": "&quot;{@inheritdoc}&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Audio", "fromLink": "FFMpeg/Media/Audio.html", "link": "FFMpeg/Media/Audio.html#method_save", "name": "FFMpeg\\Media\\Audio::save", "doc": "&quot;Exports the audio in the desired format, applies registered filters.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Audio", "fromLink": "FFMpeg/Media/Audio.html", "link": "FFMpeg/Media/Audio.html#method_getFinalCommand", "name": "FFMpeg\\Media\\Audio::getFinalCommand", "doc": "&quot;Returns the final command as a string, useful for debugging purposes.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Audio", "fromLink": "FFMpeg/Media/Audio.html", "link": "FFMpeg/Media/Audio.html#method_buildCommand", "name": "FFMpeg\\Media\\Audio::buildCommand", "doc": "&quot;Builds the command which will be executed with the provided format&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Audio", "fromLink": "FFMpeg/Media/Audio.html", "link": "FFMpeg/Media/Audio.html#method_waveform", "name": "FFMpeg\\Media\\Audio::waveform", "doc": "&quot;Gets the waveform of the video.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Audio", "fromLink": "FFMpeg/Media/Audio.html", "link": "FFMpeg/Media/Audio.html#method_concat", "name": "FFMpeg\\Media\\Audio::concat", "doc": "&quot;Concatenates a list of audio files into one unique audio file.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Media", "fromLink": "FFMpeg/Media.html", "link": "FFMpeg/Media/Clip.html", "name": "FFMpeg\\Media\\Clip", "doc": "&quot;Video clip.&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Media\\Clip", "fromLink": "FFMpeg/Media/Clip.html", "link": "FFMpeg/Media/Clip.html#method___construct", "name": "FFMpeg\\Media\\Clip::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Clip", "fromLink": "FFMpeg/Media/Clip.html", "link": "FFMpeg/Media/Clip.html#method_getVideo", "name": "FFMpeg\\Media\\Clip::getVideo", "doc": "&quot;Returns the video related to the frame.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Clip", "fromLink": "FFMpeg/Media/Clip.html", "link": "FFMpeg/Media/Clip.html#method_basePartOfCommand", "name": "FFMpeg\\Media\\Clip::basePartOfCommand", "doc": "&quot;Return base part of command.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Media", "fromLink": "FFMpeg/Media.html", "link": "FFMpeg/Media/Concat.html", "name": "FFMpeg\\Media\\Concat", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Media\\Concat", "fromLink": "FFMpeg/Media/Concat.html", "link": "FFMpeg/Media/Concat.html#method___construct", "name": "FFMpeg\\Media\\Concat::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Concat", "fromLink": "FFMpeg/Media/Concat.html", "link": "FFMpeg/Media/Concat.html#method_getSources", "name": "FFMpeg\\Media\\Concat::getSources", "doc": "&quot;Returns the path to the sources.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Concat", "fromLink": "FFMpeg/Media/Concat.html", "link": "FFMpeg/Media/Concat.html#method_filters", "name": "FFMpeg\\Media\\Concat::filters", "doc": "&quot;Returns the available filters.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Concat", "fromLink": "FFMpeg/Media/Concat.html", "link": "FFMpeg/Media/Concat.html#method_addFilter", "name": "FFMpeg\\Media\\Concat::addFilter", "doc": "&quot;{@inheritdoc}&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Concat", "fromLink": "FFMpeg/Media/Concat.html", "link": "FFMpeg/Media/Concat.html#method_saveFromSameCodecs", "name": "FFMpeg\\Media\\Concat::saveFromSameCodecs", "doc": "&quot;Saves the concatenated video in the given array, considering that the sources videos are all encoded with the same codec.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Concat", "fromLink": "FFMpeg/Media/Concat.html", "link": "FFMpeg/Media/Concat.html#method_saveFromDifferentCodecs", "name": "FFMpeg\\Media\\Concat::saveFromDifferentCodecs", "doc": "&quot;Saves the concatenated video in the given filename, considering that the sources videos are all encoded with the same codec.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Media", "fromLink": "FFMpeg/Media.html", "link": "FFMpeg/Media/Frame.html", "name": "FFMpeg\\Media\\Frame", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Media\\Frame", "fromLink": "FFMpeg/Media/Frame.html", "link": "FFMpeg/Media/Frame.html#method___construct", "name": "FFMpeg\\Media\\Frame::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Frame", "fromLink": "FFMpeg/Media/Frame.html", "link": "FFMpeg/Media/Frame.html#method_getVideo", "name": "FFMpeg\\Media\\Frame::getVideo", "doc": "&quot;Returns the video related to the frame.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Frame", "fromLink": "FFMpeg/Media/Frame.html", "link": "FFMpeg/Media/Frame.html#method_filters", "name": "FFMpeg\\Media\\Frame::filters", "doc": "&quot;Returns the available filters.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Frame", "fromLink": "FFMpeg/Media/Frame.html", "link": "FFMpeg/Media/Frame.html#method_addFilter", "name": "FFMpeg\\Media\\Frame::addFilter", "doc": "&quot;{@inheritdoc}&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Frame", "fromLink": "FFMpeg/Media/Frame.html", "link": "FFMpeg/Media/Frame.html#method_getTimeCode", "name": "FFMpeg\\Media\\Frame::getTimeCode", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Frame", "fromLink": "FFMpeg/Media/Frame.html", "link": "FFMpeg/Media/Frame.html#method_save", "name": "FFMpeg\\Media\\Frame::save", "doc": "&quot;Saves the frame in the given filename.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Media", "fromLink": "FFMpeg/Media.html", "link": "FFMpeg/Media/Gif.html", "name": "FFMpeg\\Media\\Gif", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Media\\Gif", "fromLink": "FFMpeg/Media/Gif.html", "link": "FFMpeg/Media/Gif.html#method___construct", "name": "FFMpeg\\Media\\Gif::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Gif", "fromLink": "FFMpeg/Media/Gif.html", "link": "FFMpeg/Media/Gif.html#method_getVideo", "name": "FFMpeg\\Media\\Gif::getVideo", "doc": "&quot;Returns the video related to the gif.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Gif", "fromLink": "FFMpeg/Media/Gif.html", "link": "FFMpeg/Media/Gif.html#method_filters", "name": "FFMpeg\\Media\\Gif::filters", "doc": "&quot;Returns the available filters.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Gif", "fromLink": "FFMpeg/Media/Gif.html", "link": "FFMpeg/Media/Gif.html#method_addFilter", "name": "FFMpeg\\Media\\Gif::addFilter", "doc": "&quot;{@inheritdoc}&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Gif", "fromLink": "FFMpeg/Media/Gif.html", "link": "FFMpeg/Media/Gif.html#method_getTimeCode", "name": "FFMpeg\\Media\\Gif::getTimeCode", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Gif", "fromLink": "FFMpeg/Media/Gif.html", "link": "FFMpeg/Media/Gif.html#method_getDimension", "name": "FFMpeg\\Media\\Gif::getDimension", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Gif", "fromLink": "FFMpeg/Media/Gif.html", "link": "FFMpeg/Media/Gif.html#method_save", "name": "FFMpeg\\Media\\Gif::save", "doc": "&quot;Saves the gif in the given filename.&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Media", "fromLink": "FFMpeg/Media.html", "link": "FFMpeg/Media/MediaTypeInterface.html", "name": "FFMpeg\\Media\\MediaTypeInterface", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Media\\MediaTypeInterface", "fromLink": "FFMpeg/Media/MediaTypeInterface.html", "link": "FFMpeg/Media/MediaTypeInterface.html#method_filters", "name": "FFMpeg\\Media\\MediaTypeInterface::filters", "doc": "&quot;Returns the available filters.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\MediaTypeInterface", "fromLink": "FFMpeg/Media/MediaTypeInterface.html", "link": "FFMpeg/Media/MediaTypeInterface.html#method_getPathfile", "name": "FFMpeg\\Media\\MediaTypeInterface::getPathfile", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Media", "fromLink": "FFMpeg/Media.html", "link": "FFMpeg/Media/Video.html", "name": "FFMpeg\\Media\\Video", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Media\\Video", "fromLink": "FFMpeg/Media/Video.html", "link": "FFMpeg/Media/Video.html#method_frame", "name": "FFMpeg\\Media\\Video::frame", "doc": "&quot;Gets the frame at timecode.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Video", "fromLink": "FFMpeg/Media/Video.html", "link": "FFMpeg/Media/Video.html#method_gif", "name": "FFMpeg\\Media\\Video::gif", "doc": "&quot;Extracts a gif from a sequence of the video.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Video", "fromLink": "FFMpeg/Media/Video.html", "link": "FFMpeg/Media/Video.html#method_concat", "name": "FFMpeg\\Media\\Video::concat", "doc": "&quot;Concatenates a list of videos into one unique video.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Video", "fromLink": "FFMpeg/Media/Video.html", "link": "FFMpeg/Media/Video.html#method_clip", "name": "FFMpeg\\Media\\Video::clip", "doc": "&quot;Clips the video at the given time(s).&quot;"},
            
            {"type": "Class", "fromName": "FFMpeg\\Media", "fromLink": "FFMpeg/Media.html", "link": "FFMpeg/Media/Waveform.html", "name": "FFMpeg\\Media\\Waveform", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "FFMpeg\\Media\\Waveform", "fromLink": "FFMpeg/Media/Waveform.html", "link": "FFMpeg/Media/Waveform.html#method___construct", "name": "FFMpeg\\Media\\Waveform::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Waveform", "fromLink": "FFMpeg/Media/Waveform.html", "link": "FFMpeg/Media/Waveform.html#method_getAudio", "name": "FFMpeg\\Media\\Waveform::getAudio", "doc": "&quot;Returns the audio related to the waveform.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Waveform", "fromLink": "FFMpeg/Media/Waveform.html", "link": "FFMpeg/Media/Waveform.html#method_filters", "name": "FFMpeg\\Media\\Waveform::filters", "doc": "&quot;Returns the available filters.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Waveform", "fromLink": "FFMpeg/Media/Waveform.html", "link": "FFMpeg/Media/Waveform.html#method_addFilter", "name": "FFMpeg\\Media\\Waveform::addFilter", "doc": "&quot;{@inheritdoc}&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Waveform", "fromLink": "FFMpeg/Media/Waveform.html", "link": "FFMpeg/Media/Waveform.html#method_setColors", "name": "FFMpeg\\Media\\Waveform::setColors", "doc": "&quot;Parameter should be an array containing at least one valid color represented as a HTML color string. For\nexample #FFFFFF or #000000. By default the color is set to black. Keep in mind that if you save the waveform\nas jpg file, it will appear completely black and to avoid this you can set the waveform color to white (#FFFFFF).&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Waveform", "fromLink": "FFMpeg/Media/Waveform.html", "link": "FFMpeg/Media/Waveform.html#method_getColors", "name": "FFMpeg\\Media\\Waveform::getColors", "doc": "&quot;Returns an array of colors that will be passed to ffmpeg to use for waveform generation. Colors are applied ONLY\nto the waveform. Background cannot be controlled that easily and it is probably easier to save the waveform\nas a transparent png file and then add background of choice.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Waveform", "fromLink": "FFMpeg/Media/Waveform.html", "link": "FFMpeg/Media/Waveform.html#method_compileColors", "name": "FFMpeg\\Media\\Waveform::compileColors", "doc": "&quot;Compiles the selected colors into a string, using a pipe separator.&quot;"},
                    {"type": "Method", "fromName": "FFMpeg\\Media\\Waveform", "fromLink": "FFMpeg/Media/Waveform.html", "link": "FFMpeg/Media/Waveform.html#method_save", "name": "FFMpeg\\Media\\Waveform::save", "doc": "&quot;Saves the waveform in the given filename.&quot;"},
            
            
                                        // Fix trailing commas in the index
        {}
    ];

    /** Tokenizes strings by namespaces and functions */
    function tokenizer(term) {
        if (!term) {
            return [];
        }

        var tokens = [term];
        var meth = term.indexOf('::');

        // Split tokens into methods if "::" is found.
        if (meth > -1) {
            tokens.push(term.substr(meth + 2));
            term = term.substr(0, meth - 2);
        }

        // Split by namespace or fake namespace.
        if (term.indexOf('\\') > -1) {
            tokens = tokens.concat(term.split('\\'));
        } else if (term.indexOf('_') > 0) {
            tokens = tokens.concat(term.split('_'));
        }

        // Merge in splitting the string by case and return
        tokens = tokens.concat(term.match(/(([A-Z]?[^A-Z]*)|([a-z]?[^a-z]*))/g).slice(0,-1));

        return tokens;
    };

    root.Sami = {
        /**
         * Cleans the provided term. If no term is provided, then one is
         * grabbed from the query string "search" parameter.
         */
        cleanSearchTerm: function(term) {
            // Grab from the query string
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            return term.replace(/<(?:.|\n)*?>/gm, '');
        },

        /** Searches through the index for a given term */
        search: function(term) {
            // Create a new search index if needed
            if (!bhIndex) {
                bhIndex = new Bloodhound({
                    limit: 500,
                    local: searchIndex,
                    datumTokenizer: function (d) {
                        return tokenizer(d.name);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace
                });
                bhIndex.initialize();
            }

            results = [];
            bhIndex.get(term, function(matches) {
                results = matches;
            });

            if (!rootPath) {
                return results;
            }

            // Fix the element links based on the current page depth.
            return $.map(results, function(ele) {
                if (ele.link.indexOf('..') > -1) {
                    return ele;
                }
                ele.link = rootPath + ele.link;
                if (ele.fromLink) {
                    ele.fromLink = rootPath + ele.fromLink;
                }
                return ele;
            });
        },

        /** Get a search class for a specific type */
        getSearchClass: function(type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        },

        /** Add the left-nav tree to the site */
        injectApiTree: function(ele) {
            ele.html(treeHtml);
        }
    };

    $(function() {
        // Modify the HTML to work correctly based on the current depth
        rootPath = $('body').attr('data-root-path');
        treeHtml = treeHtml.replace(/href="/g, 'href="' + rootPath);
        Sami.injectApiTree($('#api-tree'));
    });

    return root.Sami;
})(window);

$(function() {

    // Enable the version switcher
    $('#version-switcher').change(function() {
        window.location = $(this).val()
    });

    
        // Toggle left-nav divs on click
        $('#api-tree .hd span').click(function() {
            $(this).parent().parent().toggleClass('opened');
        });

        // Expand the parent namespaces of the current page.
        var expected = $('body').attr('data-name');

        if (expected) {
            // Open the currently selected node and its parents.
            var container = $('#api-tree');
            var node = $('#api-tree li[data-name="' + expected + '"]');
            // Node might not be found when simulating namespaces
            if (node.length > 0) {
                node.addClass('active').addClass('opened');
                node.parents('li').addClass('opened');
                var scrollPos = node.offset().top - container.offset().top + container.scrollTop();
                // Position the item nearer to the top of the screen.
                scrollPos -= 200;
                container.scrollTop(scrollPos);
            }
        }

    
    
        var form = $('#search-form .typeahead');
        form.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            name: 'search',
            displayKey: 'name',
            source: function (q, cb) {
                cb(Sami.search(q));
            }
        });

        // The selection is direct-linked when the user selects a suggestion.
        form.on('typeahead:selected', function(e, suggestion) {
            window.location = suggestion.link;
        });

        // The form is submitted when the user hits enter.
        form.keypress(function (e) {
            if (e.which == 13) {
                $('#search-form').submit();
                return true;
            }
        });

    
});


